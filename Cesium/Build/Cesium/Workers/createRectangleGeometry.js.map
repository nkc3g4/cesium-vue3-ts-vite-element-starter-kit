{"version":3,"file":"createRectangleGeometry.js","sources":["../../../../Source/Core/RectangleGeometry.js","../../../../Source/WorkersES6/createRectangleGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix2 from \"./Matrix2.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport RectangleGeometryLibrary from \"./RectangleGeometryLibrary.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst positionScratch = new Cartesian3();\nconst normalScratch = new Cartesian3();\nconst tangentScratch = new Cartesian3();\nconst bitangentScratch = new Cartesian3();\nconst rectangleScratch = new Rectangle();\nconst stScratch = new Cartesian2();\nconst bottomBoundingSphere = new BoundingSphere();\nconst topBoundingSphere = new BoundingSphere();\n\nfunction createAttributes(vertexFormat, attributes) {\n  const geo = new Geometry({\n    attributes: new GeometryAttributes(),\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  geo.attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: attributes.positions,\n  });\n  if (vertexFormat.normal) {\n    geo.attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attributes.normals,\n    });\n  }\n  if (vertexFormat.tangent) {\n    geo.attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attributes.tangents,\n    });\n  }\n  if (vertexFormat.bitangent) {\n    geo.attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attributes.bitangents,\n    });\n  }\n  return geo;\n}\n\nfunction calculateAttributes(\n  positions,\n  vertexFormat,\n  ellipsoid,\n  tangentRotationMatrix\n) {\n  const length = positions.length;\n\n  const normals = vertexFormat.normal ? new Float32Array(length) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(length)\n    : undefined;\n\n  let attrIndex = 0;\n  const bitangent = bitangentScratch;\n  const tangent = tangentScratch;\n  let normal = normalScratch;\n  if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n    for (let i = 0; i < length; i += 3) {\n      const p = Cartesian3.fromArray(positions, i, positionScratch);\n      const attrIndex1 = attrIndex + 1;\n      const attrIndex2 = attrIndex + 2;\n\n      normal = ellipsoid.geodeticSurfaceNormal(p, normal);\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n        Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent);\n        Cartesian3.normalize(tangent, tangent);\n\n        if (vertexFormat.bitangent) {\n          Cartesian3.normalize(\n            Cartesian3.cross(normal, tangent, bitangent),\n            bitangent\n          );\n        }\n      }\n\n      if (vertexFormat.normal) {\n        normals[attrIndex] = normal.x;\n        normals[attrIndex1] = normal.y;\n        normals[attrIndex2] = normal.z;\n      }\n      if (vertexFormat.tangent) {\n        tangents[attrIndex] = tangent.x;\n        tangents[attrIndex1] = tangent.y;\n        tangents[attrIndex2] = tangent.z;\n      }\n      if (vertexFormat.bitangent) {\n        bitangents[attrIndex] = bitangent.x;\n        bitangents[attrIndex1] = bitangent.y;\n        bitangents[attrIndex2] = bitangent.z;\n      }\n      attrIndex += 3;\n    }\n  }\n  return createAttributes(vertexFormat, {\n    positions: positions,\n    normals: normals,\n    tangents: tangents,\n    bitangents: bitangents,\n  });\n}\n\nconst v1Scratch = new Cartesian3();\nconst v2Scratch = new Cartesian3();\n\nfunction calculateAttributesWall(positions, vertexFormat, ellipsoid) {\n  const length = positions.length;\n\n  const normals = vertexFormat.normal ? new Float32Array(length) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(length)\n    : undefined;\n\n  let normalIndex = 0;\n  let tangentIndex = 0;\n  let bitangentIndex = 0;\n  let recomputeNormal = true;\n\n  let bitangent = bitangentScratch;\n  let tangent = tangentScratch;\n  let normal = normalScratch;\n  if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n    for (let i = 0; i < length; i += 6) {\n      const p = Cartesian3.fromArray(positions, i, positionScratch);\n      const p1 = Cartesian3.fromArray(positions, (i + 6) % length, v1Scratch);\n      if (recomputeNormal) {\n        const p2 = Cartesian3.fromArray(positions, (i + 3) % length, v2Scratch);\n        Cartesian3.subtract(p1, p, p1);\n        Cartesian3.subtract(p2, p, p2);\n        normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\n        recomputeNormal = false;\n      }\n\n      if (Cartesian3.equalsEpsilon(p1, p, CesiumMath.EPSILON10)) {\n        // if we've reached a corner\n        recomputeNormal = true;\n      }\n\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.cross(bitangent, normal, tangent),\n            tangent\n          );\n        }\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n      }\n    }\n  }\n\n  return createAttributes(vertexFormat, {\n    positions: positions,\n    normals: normals,\n    tangents: tangents,\n    bitangents: bitangents,\n  });\n}\n\nfunction constructRectangle(rectangleGeometry, computedOptions) {\n  const vertexFormat = rectangleGeometry._vertexFormat;\n  const ellipsoid = rectangleGeometry._ellipsoid;\n  const height = computedOptions.height;\n  const width = computedOptions.width;\n  const northCap = computedOptions.northCap;\n  const southCap = computedOptions.southCap;\n\n  let rowStart = 0;\n  let rowEnd = height;\n  let rowHeight = height;\n  let size = 0;\n  if (northCap) {\n    rowStart = 1;\n    rowHeight -= 1;\n    size += 1;\n  }\n  if (southCap) {\n    rowEnd -= 1;\n    rowHeight -= 1;\n    size += 1;\n  }\n  size += width * rowHeight;\n\n  const positions = vertexFormat.position\n    ? new Float64Array(size * 3)\n    : undefined;\n  const textureCoordinates = vertexFormat.st\n    ? new Float32Array(size * 2)\n    : undefined;\n\n  let posIndex = 0;\n  let stIndex = 0;\n\n  const position = positionScratch;\n  const st = stScratch;\n\n  let minX = Number.MAX_VALUE;\n  let minY = Number.MAX_VALUE;\n  let maxX = -Number.MAX_VALUE;\n  let maxY = -Number.MAX_VALUE;\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = 0; col < width; ++col) {\n      RectangleGeometryLibrary.computePosition(\n        computedOptions,\n        ellipsoid,\n        vertexFormat.st,\n        row,\n        col,\n        position,\n        st\n      );\n\n      positions[posIndex++] = position.x;\n      positions[posIndex++] = position.y;\n      positions[posIndex++] = position.z;\n\n      if (vertexFormat.st) {\n        textureCoordinates[stIndex++] = st.x;\n        textureCoordinates[stIndex++] = st.y;\n\n        minX = Math.min(minX, st.x);\n        minY = Math.min(minY, st.y);\n        maxX = Math.max(maxX, st.x);\n        maxY = Math.max(maxY, st.y);\n      }\n    }\n  }\n  if (northCap) {\n    RectangleGeometryLibrary.computePosition(\n      computedOptions,\n      ellipsoid,\n      vertexFormat.st,\n      0,\n      0,\n      position,\n      st\n    );\n\n    positions[posIndex++] = position.x;\n    positions[posIndex++] = position.y;\n    positions[posIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      textureCoordinates[stIndex++] = st.x;\n      textureCoordinates[stIndex++] = st.y;\n\n      minX = st.x;\n      minY = st.y;\n      maxX = st.x;\n      maxY = st.y;\n    }\n  }\n  if (southCap) {\n    RectangleGeometryLibrary.computePosition(\n      computedOptions,\n      ellipsoid,\n      vertexFormat.st,\n      height - 1,\n      0,\n      position,\n      st\n    );\n\n    positions[posIndex++] = position.x;\n    positions[posIndex++] = position.y;\n    positions[posIndex] = position.z;\n\n    if (vertexFormat.st) {\n      textureCoordinates[stIndex++] = st.x;\n      textureCoordinates[stIndex] = st.y;\n\n      minX = Math.min(minX, st.x);\n      minY = Math.min(minY, st.y);\n      maxX = Math.max(maxX, st.x);\n      maxY = Math.max(maxY, st.y);\n    }\n  }\n\n  if (\n    vertexFormat.st &&\n    (minX < 0.0 || minY < 0.0 || maxX > 1.0 || maxY > 1.0)\n  ) {\n    for (let k = 0; k < textureCoordinates.length; k += 2) {\n      textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);\n      textureCoordinates[k + 1] =\n        (textureCoordinates[k + 1] - minY) / (maxY - minY);\n    }\n  }\n\n  const geo = calculateAttributes(\n    positions,\n    vertexFormat,\n    ellipsoid,\n    computedOptions.tangentRotationMatrix\n  );\n\n  let indicesSize = 6 * (width - 1) * (rowHeight - 1);\n  if (northCap) {\n    indicesSize += 3 * (width - 1);\n  }\n  if (southCap) {\n    indicesSize += 3 * (width - 1);\n  }\n  const indices = IndexDatatype.createTypedArray(size, indicesSize);\n  let index = 0;\n  let indicesIndex = 0;\n  let i;\n  for (i = 0; i < rowHeight - 1; ++i) {\n    for (let j = 0; j < width - 1; ++j) {\n      const upperLeft = index;\n      const lowerLeft = upperLeft + width;\n      const lowerRight = lowerLeft + 1;\n      const upperRight = upperLeft + 1;\n      indices[indicesIndex++] = upperLeft;\n      indices[indicesIndex++] = lowerLeft;\n      indices[indicesIndex++] = upperRight;\n      indices[indicesIndex++] = upperRight;\n      indices[indicesIndex++] = lowerLeft;\n      indices[indicesIndex++] = lowerRight;\n      ++index;\n    }\n    ++index;\n  }\n  if (northCap || southCap) {\n    let northIndex = size - 1;\n    const southIndex = size - 1;\n    if (northCap && southCap) {\n      northIndex = size - 2;\n    }\n\n    let p1;\n    let p2;\n    index = 0;\n\n    if (northCap) {\n      for (i = 0; i < width - 1; i++) {\n        p1 = index;\n        p2 = p1 + 1;\n        indices[indicesIndex++] = northIndex;\n        indices[indicesIndex++] = p1;\n        indices[indicesIndex++] = p2;\n        ++index;\n      }\n    }\n    if (southCap) {\n      index = (rowHeight - 1) * width;\n      for (i = 0; i < width - 1; i++) {\n        p1 = index;\n        p2 = p1 + 1;\n        indices[indicesIndex++] = p1;\n        indices[indicesIndex++] = southIndex;\n        indices[indicesIndex++] = p2;\n        ++index;\n      }\n    }\n  }\n\n  geo.indices = indices;\n  if (vertexFormat.st) {\n    geo.attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return geo;\n}\n\nfunction addWallPositions(\n  wallPositions,\n  posIndex,\n  i,\n  topPositions,\n  bottomPositions\n) {\n  wallPositions[posIndex++] = topPositions[i];\n  wallPositions[posIndex++] = topPositions[i + 1];\n  wallPositions[posIndex++] = topPositions[i + 2];\n  wallPositions[posIndex++] = bottomPositions[i];\n  wallPositions[posIndex++] = bottomPositions[i + 1];\n  wallPositions[posIndex] = bottomPositions[i + 2];\n  return wallPositions;\n}\n\nfunction addWallTextureCoordinates(wallTextures, stIndex, i, st) {\n  wallTextures[stIndex++] = st[i];\n  wallTextures[stIndex++] = st[i + 1];\n  wallTextures[stIndex++] = st[i];\n  wallTextures[stIndex] = st[i + 1];\n  return wallTextures;\n}\n\nconst scratchVertexFormat = new VertexFormat();\n\nfunction constructExtrudedRectangle(rectangleGeometry, computedOptions) {\n  const shadowVolume = rectangleGeometry._shadowVolume;\n  const offsetAttributeValue = rectangleGeometry._offsetAttribute;\n  const vertexFormat = rectangleGeometry._vertexFormat;\n  const minHeight = rectangleGeometry._extrudedHeight;\n  const maxHeight = rectangleGeometry._surfaceHeight;\n  const ellipsoid = rectangleGeometry._ellipsoid;\n\n  const height = computedOptions.height;\n  const width = computedOptions.width;\n\n  let i;\n\n  if (shadowVolume) {\n    const newVertexFormat = VertexFormat.clone(\n      vertexFormat,\n      scratchVertexFormat\n    );\n    newVertexFormat.normal = true;\n    rectangleGeometry._vertexFormat = newVertexFormat;\n  }\n\n  const topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);\n\n  if (shadowVolume) {\n    rectangleGeometry._vertexFormat = vertexFormat;\n  }\n\n  let topPositions = PolygonPipeline.scaleToGeodeticHeight(\n    topBottomGeo.attributes.position.values,\n    maxHeight,\n    ellipsoid,\n    false\n  );\n  topPositions = new Float64Array(topPositions);\n  let length = topPositions.length;\n  const newLength = length * 2;\n  const positions = new Float64Array(newLength);\n  positions.set(topPositions);\n  const bottomPositions = PolygonPipeline.scaleToGeodeticHeight(\n    topBottomGeo.attributes.position.values,\n    minHeight,\n    ellipsoid\n  );\n  positions.set(bottomPositions, length);\n  topBottomGeo.attributes.position.values = positions;\n\n  const normals = vertexFormat.normal ? new Float32Array(newLength) : undefined;\n  const tangents = vertexFormat.tangent\n    ? new Float32Array(newLength)\n    : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(newLength)\n    : undefined;\n  const textures = vertexFormat.st\n    ? new Float32Array((newLength / 3) * 2)\n    : undefined;\n  let topSt;\n  let topNormals;\n  if (vertexFormat.normal) {\n    topNormals = topBottomGeo.attributes.normal.values;\n    normals.set(topNormals);\n    for (i = 0; i < length; i++) {\n      topNormals[i] = -topNormals[i];\n    }\n    normals.set(topNormals, length);\n    topBottomGeo.attributes.normal.values = normals;\n  }\n  if (shadowVolume) {\n    topNormals = topBottomGeo.attributes.normal.values;\n    if (!vertexFormat.normal) {\n      topBottomGeo.attributes.normal = undefined;\n    }\n    const extrudeNormals = new Float32Array(newLength);\n    for (i = 0; i < length; i++) {\n      topNormals[i] = -topNormals[i];\n    }\n    extrudeNormals.set(topNormals, length); //only get normals for bottom layer that's going to be pushed down\n    topBottomGeo.attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n  }\n\n  let offsetValue;\n  const hasOffsets = defined(offsetAttributeValue);\n  if (hasOffsets) {\n    const size = (length / 3) * 2;\n    let offsetAttribute = new Uint8Array(size);\n    if (offsetAttributeValue === GeometryOffsetAttribute.TOP) {\n      offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n    } else {\n      offsetValue =\n        offsetAttributeValue === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n    }\n\n    topBottomGeo.attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    const topTangents = topBottomGeo.attributes.tangent.values;\n    tangents.set(topTangents);\n    for (i = 0; i < length; i++) {\n      topTangents[i] = -topTangents[i];\n    }\n    tangents.set(topTangents, length);\n    topBottomGeo.attributes.tangent.values = tangents;\n  }\n  if (vertexFormat.bitangent) {\n    const topBitangents = topBottomGeo.attributes.bitangent.values;\n    bitangents.set(topBitangents);\n    bitangents.set(topBitangents, length);\n    topBottomGeo.attributes.bitangent.values = bitangents;\n  }\n  if (vertexFormat.st) {\n    topSt = topBottomGeo.attributes.st.values;\n    textures.set(topSt);\n    textures.set(topSt, (length / 3) * 2);\n    topBottomGeo.attributes.st.values = textures;\n  }\n\n  const indices = topBottomGeo.indices;\n  const indicesLength = indices.length;\n  const posLength = length / 3;\n  const newIndices = IndexDatatype.createTypedArray(\n    newLength / 3,\n    indicesLength * 2\n  );\n  newIndices.set(indices);\n  for (i = 0; i < indicesLength; i += 3) {\n    newIndices[i + indicesLength] = indices[i + 2] + posLength;\n    newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;\n    newIndices[i + 2 + indicesLength] = indices[i] + posLength;\n  }\n  topBottomGeo.indices = newIndices;\n\n  const northCap = computedOptions.northCap;\n  const southCap = computedOptions.southCap;\n\n  let rowHeight = height;\n  let widthMultiplier = 2;\n  let perimeterPositions = 0;\n  let corners = 4;\n  let dupliateCorners = 4;\n  if (northCap) {\n    widthMultiplier -= 1;\n    rowHeight -= 1;\n    perimeterPositions += 1;\n    corners -= 2;\n    dupliateCorners -= 1;\n  }\n  if (southCap) {\n    widthMultiplier -= 1;\n    rowHeight -= 1;\n    perimeterPositions += 1;\n    corners -= 2;\n    dupliateCorners -= 1;\n  }\n  perimeterPositions += widthMultiplier * width + 2 * rowHeight - corners;\n\n  const wallCount = (perimeterPositions + dupliateCorners) * 2;\n\n  let wallPositions = new Float64Array(wallCount * 3);\n  const wallExtrudeNormals = shadowVolume\n    ? new Float32Array(wallCount * 3)\n    : undefined;\n  let wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : undefined;\n  let wallTextures = vertexFormat.st\n    ? new Float32Array(wallCount * 2)\n    : undefined;\n\n  const computeTopOffsets =\n    offsetAttributeValue === GeometryOffsetAttribute.TOP;\n  if (hasOffsets && !computeTopOffsets) {\n    offsetValue = offsetAttributeValue === GeometryOffsetAttribute.ALL ? 1 : 0;\n    wallOffsetAttribute = arrayFill(wallOffsetAttribute, offsetValue);\n  }\n\n  let posIndex = 0;\n  let stIndex = 0;\n  let extrudeNormalIndex = 0;\n  let wallOffsetIndex = 0;\n  const area = width * rowHeight;\n  let threeI;\n  for (i = 0; i < area; i += width) {\n    threeI = i * 3;\n    wallPositions = addWallPositions(\n      wallPositions,\n      posIndex,\n      threeI,\n      topPositions,\n      bottomPositions\n    );\n    posIndex += 6;\n    if (vertexFormat.st) {\n      wallTextures = addWallTextureCoordinates(\n        wallTextures,\n        stIndex,\n        i * 2,\n        topSt\n      );\n      stIndex += 4;\n    }\n    if (shadowVolume) {\n      extrudeNormalIndex += 3;\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n    }\n    if (computeTopOffsets) {\n      wallOffsetAttribute[wallOffsetIndex++] = 1;\n      wallOffsetIndex += 1;\n    }\n  }\n\n  if (!southCap) {\n    for (i = area - width; i < area; i++) {\n      threeI = i * 3;\n      wallPositions = addWallPositions(\n        wallPositions,\n        posIndex,\n        threeI,\n        topPositions,\n        bottomPositions\n      );\n      posIndex += 6;\n      if (vertexFormat.st) {\n        wallTextures = addWallTextureCoordinates(\n          wallTextures,\n          stIndex,\n          i * 2,\n          topSt\n        );\n        stIndex += 4;\n      }\n      if (shadowVolume) {\n        extrudeNormalIndex += 3;\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n      }\n      if (computeTopOffsets) {\n        wallOffsetAttribute[wallOffsetIndex++] = 1;\n        wallOffsetIndex += 1;\n      }\n    }\n  } else {\n    const southIndex = northCap ? area + 1 : area;\n    threeI = southIndex * 3;\n\n    for (i = 0; i < 2; i++) {\n      // duplicate corner points\n      wallPositions = addWallPositions(\n        wallPositions,\n        posIndex,\n        threeI,\n        topPositions,\n        bottomPositions\n      );\n      posIndex += 6;\n      if (vertexFormat.st) {\n        wallTextures = addWallTextureCoordinates(\n          wallTextures,\n          stIndex,\n          southIndex * 2,\n          topSt\n        );\n        stIndex += 4;\n      }\n      if (shadowVolume) {\n        extrudeNormalIndex += 3;\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n      }\n      if (computeTopOffsets) {\n        wallOffsetAttribute[wallOffsetIndex++] = 1;\n        wallOffsetIndex += 1;\n      }\n    }\n  }\n\n  for (i = area - 1; i > 0; i -= width) {\n    threeI = i * 3;\n    wallPositions = addWallPositions(\n      wallPositions,\n      posIndex,\n      threeI,\n      topPositions,\n      bottomPositions\n    );\n    posIndex += 6;\n    if (vertexFormat.st) {\n      wallTextures = addWallTextureCoordinates(\n        wallTextures,\n        stIndex,\n        i * 2,\n        topSt\n      );\n      stIndex += 4;\n    }\n    if (shadowVolume) {\n      extrudeNormalIndex += 3;\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n      wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n    }\n    if (computeTopOffsets) {\n      wallOffsetAttribute[wallOffsetIndex++] = 1;\n      wallOffsetIndex += 1;\n    }\n  }\n\n  if (!northCap) {\n    for (i = width - 1; i >= 0; i--) {\n      threeI = i * 3;\n      wallPositions = addWallPositions(\n        wallPositions,\n        posIndex,\n        threeI,\n        topPositions,\n        bottomPositions\n      );\n      posIndex += 6;\n      if (vertexFormat.st) {\n        wallTextures = addWallTextureCoordinates(\n          wallTextures,\n          stIndex,\n          i * 2,\n          topSt\n        );\n        stIndex += 4;\n      }\n      if (shadowVolume) {\n        extrudeNormalIndex += 3;\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n      }\n      if (computeTopOffsets) {\n        wallOffsetAttribute[wallOffsetIndex++] = 1;\n        wallOffsetIndex += 1;\n      }\n    }\n  } else {\n    const northIndex = area;\n    threeI = northIndex * 3;\n\n    for (i = 0; i < 2; i++) {\n      // duplicate corner points\n      wallPositions = addWallPositions(\n        wallPositions,\n        posIndex,\n        threeI,\n        topPositions,\n        bottomPositions\n      );\n      posIndex += 6;\n      if (vertexFormat.st) {\n        wallTextures = addWallTextureCoordinates(\n          wallTextures,\n          stIndex,\n          northIndex * 2,\n          topSt\n        );\n        stIndex += 4;\n      }\n      if (shadowVolume) {\n        extrudeNormalIndex += 3;\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n        wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n      }\n      if (computeTopOffsets) {\n        wallOffsetAttribute[wallOffsetIndex++] = 1;\n        wallOffsetIndex += 1;\n      }\n    }\n  }\n\n  let geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);\n\n  if (vertexFormat.st) {\n    geo.attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: wallTextures,\n    });\n  }\n  if (shadowVolume) {\n    geo.attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: wallExtrudeNormals,\n    });\n  }\n  if (hasOffsets) {\n    geo.attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: wallOffsetAttribute,\n    });\n  }\n\n  const wallIndices = IndexDatatype.createTypedArray(\n    wallCount,\n    perimeterPositions * 6\n  );\n\n  let upperLeft;\n  let lowerLeft;\n  let lowerRight;\n  let upperRight;\n  length = wallPositions.length / 3;\n  let index = 0;\n  for (i = 0; i < length - 1; i += 2) {\n    upperLeft = i;\n    upperRight = (upperLeft + 2) % length;\n    const p1 = Cartesian3.fromArray(wallPositions, upperLeft * 3, v1Scratch);\n    const p2 = Cartesian3.fromArray(wallPositions, upperRight * 3, v2Scratch);\n    if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10)) {\n      continue;\n    }\n    lowerLeft = (upperLeft + 1) % length;\n    lowerRight = (lowerLeft + 2) % length;\n    wallIndices[index++] = upperLeft;\n    wallIndices[index++] = lowerLeft;\n    wallIndices[index++] = upperRight;\n    wallIndices[index++] = upperRight;\n    wallIndices[index++] = lowerLeft;\n    wallIndices[index++] = lowerRight;\n  }\n\n  geo.indices = wallIndices;\n\n  geo = GeometryPipeline.combineInstances([\n    new GeometryInstance({\n      geometry: topBottomGeo,\n    }),\n    new GeometryInstance({\n      geometry: geo,\n    }),\n  ]);\n\n  return geo[0];\n}\n\nconst scratchRectanglePoints = [\n  new Cartesian3(),\n  new Cartesian3(),\n  new Cartesian3(),\n  new Cartesian3(),\n];\nconst nwScratch = new Cartographic();\nconst stNwScratch = new Cartographic();\nfunction computeRectangle(rectangle, granularity, rotation, ellipsoid, result) {\n  if (rotation === 0.0) {\n    return Rectangle.clone(rectangle, result);\n  }\n\n  const computedOptions = RectangleGeometryLibrary.computeOptions(\n    rectangle,\n    granularity,\n    rotation,\n    0,\n    rectangleScratch,\n    nwScratch\n  );\n\n  const height = computedOptions.height;\n  const width = computedOptions.width;\n\n  const positions = scratchRectanglePoints;\n  RectangleGeometryLibrary.computePosition(\n    computedOptions,\n    ellipsoid,\n    false,\n    0,\n    0,\n    positions[0]\n  );\n  RectangleGeometryLibrary.computePosition(\n    computedOptions,\n    ellipsoid,\n    false,\n    0,\n    width - 1,\n    positions[1]\n  );\n  RectangleGeometryLibrary.computePosition(\n    computedOptions,\n    ellipsoid,\n    false,\n    height - 1,\n    0,\n    positions[2]\n  );\n  RectangleGeometryLibrary.computePosition(\n    computedOptions,\n    ellipsoid,\n    false,\n    height - 1,\n    width - 1,\n    positions[3]\n  );\n\n  return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n}\n\n/**\n * A description of a cartographic rectangle on an ellipsoid centered at the origin. Rectangle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias RectangleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\n * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\n *\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>options.rectangle.south</code>.\n *\n * @see RectangleGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\n *\n * @example\n * // 1. create a rectangle\n * const rectangle = new Cesium.RectangleGeometry({\n *   ellipsoid : Cesium.Ellipsoid.WGS84,\n *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\n *   height : 10000.0\n * });\n * const geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\n *\n * // 2. create an extruded rectangle without a top\n * const rectangle = new Cesium.RectangleGeometry({\n *   ellipsoid : Cesium.Ellipsoid.WGS84,\n *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\n *   height : 10000.0,\n *   extrudedHeight: 300000\n * });\n * const geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\n */\nfunction RectangleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const rectangle = options.rectangle;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  Rectangle.validate(rectangle);\n  if (rectangle.north < rectangle.south) {\n    throw new DeveloperError(\n      \"options.rectangle.north must be greater than or equal to options.rectangle.south\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const height = defaultValue(options.height, 0.0);\n  const extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  this._rectangle = Rectangle.clone(rectangle);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._surfaceHeight = Math.max(height, extrudedHeight);\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._extrudedHeight = Math.min(height, extrudedHeight);\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createRectangleGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._rotatedRectangle = undefined;\n\n  this._textureCoordinateRotationPoints = undefined;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nRectangleGeometry.packedLength =\n  Rectangle.packedLength +\n  Ellipsoid.packedLength +\n  VertexFormat.packedLength +\n  7;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {RectangleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nRectangleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Rectangle.pack(value._rectangle, array, startingIndex);\n  startingIndex += Rectangle.packedLength;\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._surfaceHeight;\n  array[startingIndex++] = value._rotation;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nconst scratchRectangle = new Rectangle();\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchOptions = {\n  rectangle: scratchRectangle,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  granularity: undefined,\n  height: undefined,\n  rotation: undefined,\n  stRotation: undefined,\n  extrudedHeight: undefined,\n  shadowVolume: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {RectangleGeometry} [result] The object into which to store the result.\n * @returns {RectangleGeometry} The modified result parameter or a new RectangleGeometry instance if one was not provided.\n */\nRectangleGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\n  startingIndex += Rectangle.packedLength;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const granularity = array[startingIndex++];\n  const surfaceHeight = array[startingIndex++];\n  const rotation = array[startingIndex++];\n  const stRotation = array[startingIndex++];\n  const extrudedHeight = array[startingIndex++];\n  const shadowVolume = array[startingIndex++] === 1.0;\n  const offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.granularity = granularity;\n    scratchOptions.height = surfaceHeight;\n    scratchOptions.rotation = rotation;\n    scratchOptions.stRotation = stRotation;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.shadowVolume = shadowVolume;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new RectangleGeometry(scratchOptions);\n  }\n\n  result._rectangle = Rectangle.clone(rectangle, result._rectangle);\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._granularity = granularity;\n  result._surfaceHeight = surfaceHeight;\n  result._rotation = rotation;\n  result._stRotation = stRotation;\n  result._extrudedHeight = extrudedHeight;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the bounding rectangle based on the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle\n */\nRectangleGeometry.computeRectangle = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const rectangle = options.rectangle;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  Rectangle.validate(rectangle);\n  if (rectangle.north < rectangle.south) {\n    throw new DeveloperError(\n      \"options.rectangle.north must be greater than or equal to options.rectangle.south\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  const rotation = defaultValue(options.rotation, 0.0);\n\n  return computeRectangle(rectangle, granularity, rotation, ellipsoid, result);\n};\n\nconst tangentRotationMatrixScratch = new Matrix3();\nconst quaternionScratch = new Quaternion();\nconst centerScratch = new Cartographic();\n/**\n * Computes the geometric representation of a rectangle, including its vertices, indices, and a bounding sphere.\n *\n * @param {RectangleGeometry} rectangleGeometry A description of the rectangle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n *\n * @exception {DeveloperError} Rotated rectangle is invalid.\n */\nRectangleGeometry.createGeometry = function (rectangleGeometry) {\n  if (\n    CesiumMath.equalsEpsilon(\n      rectangleGeometry._rectangle.north,\n      rectangleGeometry._rectangle.south,\n      CesiumMath.EPSILON10\n    ) ||\n    CesiumMath.equalsEpsilon(\n      rectangleGeometry._rectangle.east,\n      rectangleGeometry._rectangle.west,\n      CesiumMath.EPSILON10\n    )\n  ) {\n    return undefined;\n  }\n\n  let rectangle = rectangleGeometry._rectangle;\n  const ellipsoid = rectangleGeometry._ellipsoid;\n  const rotation = rectangleGeometry._rotation;\n  const stRotation = rectangleGeometry._stRotation;\n  const vertexFormat = rectangleGeometry._vertexFormat;\n\n  const computedOptions = RectangleGeometryLibrary.computeOptions(\n    rectangle,\n    rectangleGeometry._granularity,\n    rotation,\n    stRotation,\n    rectangleScratch,\n    nwScratch,\n    stNwScratch\n  );\n\n  const tangentRotationMatrix = tangentRotationMatrixScratch;\n  if (stRotation !== 0 || rotation !== 0) {\n    const center = Rectangle.center(rectangle, centerScratch);\n    const axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);\n    Quaternion.fromAxisAngle(axis, -stRotation, quaternionScratch);\n    Matrix3.fromQuaternion(quaternionScratch, tangentRotationMatrix);\n  } else {\n    Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\n  }\n\n  const surfaceHeight = rectangleGeometry._surfaceHeight;\n  const extrudedHeight = rectangleGeometry._extrudedHeight;\n  const extrude = !CesiumMath.equalsEpsilon(\n    surfaceHeight,\n    extrudedHeight,\n    0,\n    CesiumMath.EPSILON2\n  );\n\n  computedOptions.lonScalar = 1.0 / rectangleGeometry._rectangle.width;\n  computedOptions.latScalar = 1.0 / rectangleGeometry._rectangle.height;\n  computedOptions.tangentRotationMatrix = tangentRotationMatrix;\n\n  let geometry;\n  let boundingSphere;\n  rectangle = rectangleGeometry._rectangle;\n  if (extrude) {\n    geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\n    const topBS = BoundingSphere.fromRectangle3D(\n      rectangle,\n      ellipsoid,\n      surfaceHeight,\n      topBoundingSphere\n    );\n    const bottomBS = BoundingSphere.fromRectangle3D(\n      rectangle,\n      ellipsoid,\n      extrudedHeight,\n      bottomBoundingSphere\n    );\n    boundingSphere = BoundingSphere.union(topBS, bottomBS);\n  } else {\n    geometry = constructRectangle(rectangleGeometry, computedOptions);\n    geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n      geometry.attributes.position.values,\n      surfaceHeight,\n      ellipsoid,\n      false\n    );\n\n    if (defined(rectangleGeometry._offsetAttribute)) {\n      const length = geometry.attributes.position.values.length;\n      const applyOffset = new Uint8Array(length / 3);\n      const offsetValue =\n        rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n          ? 0\n          : 1;\n      arrayFill(applyOffset, offsetValue);\n      geometry.attributes.applyOffset = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n\n    boundingSphere = BoundingSphere.fromRectangle3D(\n      rectangle,\n      ellipsoid,\n      surfaceHeight\n    );\n  }\n\n  if (!vertexFormat.position) {\n    delete geometry.attributes.position;\n  }\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n    offsetAttribute: rectangleGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nRectangleGeometry.createShadowVolume = function (\n  rectangleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = rectangleGeometry._granularity;\n  const ellipsoid = rectangleGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new RectangleGeometry({\n    rectangle: rectangleGeometry._rectangle,\n    rotation: rectangleGeometry._rotation,\n    ellipsoid: ellipsoid,\n    stRotation: rectangleGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: maxHeight,\n    height: minHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nconst unrotatedTextureRectangleScratch = new Rectangle();\nconst points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\nconst rotation2DScratch = new Matrix2();\nconst rectangleCenterScratch = new Cartographic();\n\nfunction textureCoordinateRotationPoints(rectangleGeometry) {\n  if (rectangleGeometry._stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n\n  const rectangle = Rectangle.clone(\n    rectangleGeometry._rectangle,\n    unrotatedTextureRectangleScratch\n  );\n  const granularity = rectangleGeometry._granularity;\n  const ellipsoid = rectangleGeometry._ellipsoid;\n\n  // Rotate to align the texture coordinates with ENU\n  const rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;\n\n  const unrotatedTextureRectangle = computeRectangle(\n    rectangle,\n    granularity,\n    rotation,\n    ellipsoid,\n    unrotatedTextureRectangleScratch\n  );\n\n  // Assume a computed \"east-north\" texture coordinate system based on spherical or planar tricks, bounded by `boundingRectangle`.\n  // The \"desired\" texture coordinate system forms an oriented rectangle (un-oriented computed) around the geometry that completely and tightly bounds it.\n  // We want to map from the \"east-north\" texture coordinate system into the \"desired\" system using a pair of lines (analagous planes in 2D)\n  // Compute 3 corners of the \"desired\" texture coordinate system in \"east-north\" texture space by the following in cartographic space:\n  // - rotate 3 of the corners in unrotatedTextureRectangle by stRotation around the center of the bounding rectangle\n  // - apply the \"east-north\" system's normalization formula to the rotated cartographics, even though this is likely to produce values outside [0-1].\n  // This gives us a set of points in the \"east-north\" texture coordinate system that can be used to map \"east-north\" texture coordinates to \"desired.\"\n\n  const points2D = points2DScratch;\n  points2D[0].x = unrotatedTextureRectangle.west;\n  points2D[0].y = unrotatedTextureRectangle.south;\n\n  points2D[1].x = unrotatedTextureRectangle.west;\n  points2D[1].y = unrotatedTextureRectangle.north;\n\n  points2D[2].x = unrotatedTextureRectangle.east;\n  points2D[2].y = unrotatedTextureRectangle.south;\n\n  const boundingRectangle = rectangleGeometry.rectangle;\n  const toDesiredInComputed = Matrix2.fromRotation(\n    rectangleGeometry._stRotation,\n    rotation2DScratch\n  );\n  const boundingRectangleCenter = Rectangle.center(\n    boundingRectangle,\n    rectangleCenterScratch\n  );\n\n  for (let i = 0; i < 3; ++i) {\n    const point2D = points2D[i];\n    point2D.x -= boundingRectangleCenter.longitude;\n    point2D.y -= boundingRectangleCenter.latitude;\n    Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\n    point2D.x += boundingRectangleCenter.longitude;\n    point2D.y += boundingRectangleCenter.latitude;\n\n    // Convert point into east-north texture coordinate space\n    point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;\n    point2D.y =\n      (point2D.y - boundingRectangle.south) / boundingRectangle.height;\n  }\n\n  const minXYCorner = points2D[0];\n  const maxYCorner = points2D[1];\n  const maxXCorner = points2D[2];\n  const result = new Array(6);\n  Cartesian2.pack(minXYCorner, result);\n  Cartesian2.pack(maxYCorner, result, 2);\n  Cartesian2.pack(maxXCorner, result, 4);\n  return result;\n}\n\nObject.defineProperties(RectangleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rotatedRectangle)) {\n        this._rotatedRectangle = computeRectangle(\n          this._rectangle,\n          this._granularity,\n          this._rotation,\n          this._ellipsoid\n        );\n      }\n      return this._rotatedRectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.\n   * This version permits skew in textures by computing offsets directly in cartographic space and\n   * more accurately approximates rendering RectangleGeometries with height as standard Primitives.\n   * @see Geometry#_textureCoordinateRotationPoints\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!defined(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default RectangleGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RectangleGeometry from \"../Core/RectangleGeometry.js\";\n\nfunction createRectangleGeometry(rectangleGeometry, offset) {\n  if (defined(offset)) {\n    rectangleGeometry = RectangleGeometry.unpack(rectangleGeometry, offset);\n  }\n  rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\n  rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\n  return RectangleGeometry.createGeometry(rectangleGeometry);\n}\nexport default createRectangleGeometry;\n"],"names":["positionScratch","Cartesian3","normalScratch","tangentScratch","bitangentScratch","rectangleScratch","Rectangle","stScratch","Cartesian2","bottomBoundingSphere","BoundingSphere","topBoundingSphere","createAttributes","vertexFormat","attributes","geo","Geometry","GeometryAttributes","primitiveType","PrimitiveType","TRIANGLES","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","positions","normal","FLOAT","normals","tangent","tangents","bitangent","bitangents","v1Scratch","v2Scratch","constructRectangle","rectangleGeometry","computedOptions","_vertexFormat","ellipsoid","_ellipsoid","height","width","northCap","southCap","rowStart","rowEnd","rowHeight","size","Float64Array","undefined","textureCoordinates","st","Float32Array","posIndex","stIndex","minX","Number","MAX_VALUE","minY","maxX","maxY","row","col","RectangleGeometryLibrary","computePosition","x","y","z","Math","min","max","k","length","tangentRotationMatrix","attrIndex","i","p","fromArray","attrIndex1","attrIndex2","geodeticSurfaceNormal","cross","UNIT_Z","Matrix3","multiplyByVector","normalize","calculateAttributes","indicesSize","indices","IndexDatatype","createTypedArray","index","indicesIndex","j","upperLeft","lowerLeft","lowerRight","upperRight","northIndex","southIndex","p1","p2","addWallPositions","wallPositions","topPositions","bottomPositions","addWallTextureCoordinates","wallTextures","scratchVertexFormat","VertexFormat","constructExtrudedRectangle","shadowVolume","_shadowVolume","offsetAttributeValue","_offsetAttribute","minHeight","_extrudedHeight","maxHeight","_surfaceHeight","newVertexFormat","clone","topBottomGeo","PolygonPipeline","scaleToGeodeticHeight","newLength","set","textures","topSt","topNormals","offsetValue","extrudeNormals","extrudeDirection","hasOffsets","defined","offsetAttribute","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","NONE","applyOffset","UNSIGNED_BYTE","topTangents","topBitangents","indicesLength","posLength","newIndices","widthMultiplier","perimeterPositions","corners","dupliateCorners","wallCount","wallExtrudeNormals","wallOffsetAttribute","computeTopOffsets","ALL","extrudeNormalIndex","wallOffsetIndex","area","threeI","normalIndex","tangentIndex","bitangentIndex","recomputeNormal","subtract","equalsEpsilon","CesiumMath","EPSILON10","calculateAttributesWall","wallIndices","GeometryPipeline","combineInstances","GeometryInstance","geometry","scratchRectanglePoints","nwScratch","Cartographic","stNwScratch","computeRectangle","rectangle","granularity","rotation","result","computeOptions","fromCartesianArray","RectangleGeometry","options","defaultValue","EMPTY_OBJECT","Check","typeOf","object","validate","north","south","DeveloperError","extrudedHeight","this","_rectangle","_granularity","RADIANS_PER_DEGREE","Ellipsoid","WGS84","_rotation","_stRotation","stRotation","DEFAULT","_workerName","_rotatedRectangle","_textureCoordinateRotationPoints","packedLength","pack","value","array","startingIndex","scratchRectangle","scratchEllipsoid","UNIT_SPHERE","scratchOptions","unpack","surfaceHeight","tangentRotationMatrixScratch","quaternionScratch","Quaternion","centerScratch","createGeometry","east","west","center","axis","geodeticSurfaceNormalCartographic","fromAxisAngle","fromQuaternion","IDENTITY","extrude","EPSILON2","boundingSphere","lonScalar","latScalar","topBS","fromRectangle3D","bottomBS","union","createShadowVolume","minHeightFunc","maxHeightFunc","POSITION_ONLY","unrotatedTextureRectangleScratch","points2DScratch","rotation2DScratch","Matrix2","rectangleCenterScratch","Object","defineProperties","prototype","get","textureCoordinateRotationPoints","unrotatedTextureRectangle","points2D","boundingRectangle","toDesiredInComputed","fromRotation","boundingRectangleCenter","point2D","longitude","latitude","minXYCorner","maxYCorner","maxXCorner","Array","offset"],"mappings":"gtBA4BA,MAAMA,EAAkB,IAAIC,EAAAA,WACtBC,EAAgB,IAAID,EAAAA,WACpBE,EAAiB,IAAIF,EAAAA,WACrBG,EAAmB,IAAIH,EAAAA,WACvBI,EAAmB,IAAIC,EAAAA,UACvBC,EAAY,IAAIC,EAAAA,WAChBC,EAAuB,IAAIC,EAAAA,eAC3BC,EAAoB,IAAID,EAAAA,eAE9B,SAASE,EAAiBC,EAAcC,GACtC,MAAMC,EAAM,IAAIC,WAAS,CACvBF,WAAY,IAAIG,EAAAA,mBAChBC,cAAeC,EAAaA,cAACC,YA6B/B,OA1BAL,EAAID,WAAWO,SAAW,IAAIC,oBAAkB,CAC9CC,kBAAmBC,EAAiBA,kBAACC,OACrCC,uBAAwB,EACxBC,OAAQb,EAAWc,YAEjBf,EAAagB,SACfd,EAAID,WAAWe,OAAS,IAAIP,oBAAkB,CAC5CC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQb,EAAWiB,WAGnBlB,EAAamB,UACfjB,EAAID,WAAWkB,QAAU,IAAIV,oBAAkB,CAC7CC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQb,EAAWmB,YAGnBpB,EAAaqB,YACfnB,EAAID,WAAWoB,UAAY,IAAIZ,oBAAkB,CAC/CC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQb,EAAWqB,cAGhBpB,EAmET,MAAMqB,EAAY,IAAInC,EAAAA,WAChBoC,EAAY,IAAIpC,EAAAA,WAmFtB,SAASqC,EAAmBC,EAAmBC,GAC7C,MAAM3B,EAAe0B,EAAkBE,cACjCC,EAAYH,EAAkBI,WAC9BC,EAASJ,EAAgBI,OACzBC,EAAQL,EAAgBK,MACxBC,EAAWN,EAAgBM,SAC3BC,EAAWP,EAAgBO,SAEjC,IAAIC,EAAW,EACXC,EAASL,EACTM,EAAYN,EACZO,EAAO,EACPL,IACFE,EAAW,EACXE,GAAa,EACbC,GAAQ,GAENJ,IACFE,GAAU,EACVC,GAAa,EACbC,GAAQ,GAEVA,GAAQN,EAAQK,EAEhB,MAAMtB,EAAYf,EAAaQ,SAC3B,IAAI+B,aAAoB,EAAPD,QACjBE,EACEC,EAAqBzC,EAAa0C,GACpC,IAAIC,aAAoB,EAAPL,QACjBE,EAEJ,IAAII,EAAW,EACXC,EAAU,EAEd,MAAMrC,EAAWrB,EACXuD,EAAKhD,EAEX,IAAIoD,EAAOC,OAAOC,UACdC,EAAOF,OAAOC,UACdE,GAAQH,OAAOC,UACfG,GAAQJ,OAAOC,UAEnB,IAAK,IAAII,EAAMjB,EAAUiB,EAAMhB,IAAUgB,EACvC,IAAK,IAAIC,EAAM,EAAGA,EAAMrB,IAASqB,EAC/BC,EAAAA,yBAAyBC,gBACvB5B,EACAE,EACA7B,EAAa0C,GACbU,EACAC,EACA7C,EACAkC,GAGF3B,EAAU6B,KAAcpC,EAASgD,EACjCzC,EAAU6B,KAAcpC,EAASiD,EACjC1C,EAAU6B,KAAcpC,EAASkD,EAE7B1D,EAAa0C,KACfD,EAAmBI,KAAaH,EAAGc,EACnCf,EAAmBI,KAAaH,EAAGe,EAEnCX,EAAOa,KAAKC,IAAId,EAAMJ,EAAGc,GACzBP,EAAOU,KAAKC,IAAIX,EAAMP,EAAGe,GACzBP,EAAOS,KAAKE,IAAIX,EAAMR,EAAGc,GACzBL,EAAOQ,KAAKE,IAAIV,EAAMT,EAAGe,IAuD/B,GAnDIxB,IACFqB,EAAAA,yBAAyBC,gBACvB5B,EACAE,EACA7B,EAAa0C,GACb,EACA,EACAlC,EACAkC,GAGF3B,EAAU6B,KAAcpC,EAASgD,EACjCzC,EAAU6B,KAAcpC,EAASiD,EACjC1C,EAAU6B,KAAcpC,EAASkD,EAE7B1D,EAAa0C,KACfD,EAAmBI,KAAaH,EAAGc,EACnCf,EAAmBI,KAAaH,EAAGe,EAEnCX,EAAOJ,EAAGc,EACVP,EAAOP,EAAGe,EACVP,EAAOR,EAAGc,EACVL,EAAOT,EAAGe,IAGVvB,IACFoB,EAAAA,yBAAyBC,gBACvB5B,EACAE,EACA7B,EAAa0C,GACbX,EAAS,EACT,EACAvB,EACAkC,GAGF3B,EAAU6B,KAAcpC,EAASgD,EACjCzC,EAAU6B,KAAcpC,EAASiD,EACjC1C,EAAU6B,GAAYpC,EAASkD,EAE3B1D,EAAa0C,KACfD,EAAmBI,KAAaH,EAAGc,EACnCf,EAAmBI,GAAWH,EAAGe,EAEjCX,EAAOa,KAAKC,IAAId,EAAMJ,EAAGc,GACzBP,EAAOU,KAAKC,IAAIX,EAAMP,EAAGe,GACzBP,EAAOS,KAAKE,IAAIX,EAAMR,EAAGc,GACzBL,EAAOQ,KAAKE,IAAIV,EAAMT,EAAGe,KAK3BzD,EAAa0C,KACZI,EAAO,GAAOG,EAAO,GAAOC,EAAO,GAAOC,EAAO,GAElD,IAAK,IAAIW,EAAI,EAAGA,EAAIrB,EAAmBsB,OAAQD,GAAK,EAClDrB,EAAmBqB,IAAMrB,EAAmBqB,GAAKhB,IAASI,EAAOJ,GACjEL,EAAmBqB,EAAI,IACpBrB,EAAmBqB,EAAI,GAAKb,IAASE,EAAOF,GAInD,MAAM/C,EAvRR,SACEa,EACAf,EACA6B,EACAmC,GAEA,MAAMD,EAAShD,EAAUgD,OAEnB7C,EAAUlB,EAAagB,OAAS,IAAI2B,aAAaoB,QAAUvB,EAC3DpB,EAAWpB,EAAamB,QAAU,IAAIwB,aAAaoB,QAAUvB,EAC7DlB,EAAatB,EAAaqB,UAC5B,IAAIsB,aAAaoB,QACjBvB,EAEJ,IAAIyB,EAAY,EAChB,MAAM5C,EAAY9B,EACZ4B,EAAU7B,EAChB,IAAI0B,EAAS3B,EACb,GAAIW,EAAagB,QAAUhB,EAAamB,SAAWnB,EAAaqB,UAC9D,IAAK,IAAI6C,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAAG,CAClC,MAAMC,EAAI/E,EAAAA,WAAWgF,UAAUrD,EAAWmD,EAAG/E,GACvCkF,EAAaJ,EAAY,EACzBK,EAAaL,EAAY,EAE/BjD,EAASa,EAAU0C,sBAAsBJ,EAAGnD,IACxChB,EAAamB,SAAWnB,EAAaqB,aACvCjC,EAAUA,WAACoF,MAAMpF,EAAUA,WAACqF,OAAQzD,EAAQG,GAC5CuD,EAAAA,QAAQC,iBAAiBX,EAAuB7C,EAASA,GACzD/B,EAAAA,WAAWwF,UAAUzD,EAASA,GAE1BnB,EAAaqB,WACfjC,EAAAA,WAAWwF,UACTxF,EAAAA,WAAWoF,MAAMxD,EAAQG,EAASE,GAClCA,IAKFrB,EAAagB,SACfE,EAAQ+C,GAAajD,EAAOwC,EAC5BtC,EAAQmD,GAAcrD,EAAOyC,EAC7BvC,EAAQoD,GAActD,EAAO0C,GAE3B1D,EAAamB,UACfC,EAAS6C,GAAa9C,EAAQqC,EAC9BpC,EAASiD,GAAclD,EAAQsC,EAC/BrC,EAASkD,GAAcnD,EAAQuC,GAE7B1D,EAAaqB,YACfC,EAAW2C,GAAa5C,EAAUmC,EAClClC,EAAW+C,GAAchD,EAAUoC,EACnCnC,EAAWgD,GAAcjD,EAAUqC,GAErCO,GAAa,EAGjB,OAAOlE,EAAiBC,EAAc,CACpCe,UAAWA,EACXG,QAASA,EACTE,SAAUA,EACVE,WAAYA,IA2NFuD,CACV9D,EACAf,EACA6B,EACAF,EAAgBqC,uBAGlB,IAAIc,EAAc,GAAK9C,EAAQ,IAAMK,EAAY,GAC7CJ,IACF6C,GAAe,GAAK9C,EAAQ,IAE1BE,IACF4C,GAAe,GAAK9C,EAAQ,IAE9B,MAAM+C,EAAUC,EAAaA,cAACC,iBAAiB3C,EAAMwC,GACrD,IAEIZ,EAFAgB,EAAQ,EACRC,EAAe,EAEnB,IAAKjB,EAAI,EAAGA,EAAI7B,EAAY,IAAK6B,EAAG,CAClC,IAAK,IAAIkB,EAAI,EAAGA,EAAIpD,EAAQ,IAAKoD,EAAG,CAClC,MAAMC,EAAYH,EACZI,EAAYD,EAAYrD,EACxBuD,EAAaD,EAAY,EACzBE,EAAaH,EAAY,EAC/BN,EAAQI,KAAkBE,EAC1BN,EAAQI,KAAkBG,EAC1BP,EAAQI,KAAkBK,EAC1BT,EAAQI,KAAkBK,EAC1BT,EAAQI,KAAkBG,EAC1BP,EAAQI,KAAkBI,IACxBL,IAEFA,EAEJ,GAAIjD,GAAYC,EAAU,CACxB,IAAIuD,EAAanD,EAAO,EACxB,MAAMoD,EAAapD,EAAO,EAK1B,IAAIqD,EACAC,EAGJ,GARI3D,GAAYC,IACduD,EAAanD,EAAO,GAKtB4C,EAAQ,EAEJjD,EACF,IAAKiC,EAAI,EAAGA,EAAIlC,EAAQ,EAAGkC,IACzByB,EAAKT,EACLU,EAAKD,EAAK,EACVZ,EAAQI,KAAkBM,EAC1BV,EAAQI,KAAkBQ,EAC1BZ,EAAQI,KAAkBS,IACxBV,EAGN,GAAIhD,EAEF,IADAgD,GAAS7C,EAAY,GAAKL,EACrBkC,EAAI,EAAGA,EAAIlC,EAAQ,EAAGkC,IACzByB,EAAKT,EACLU,EAAKD,EAAK,EACVZ,EAAQI,KAAkBQ,EAC1BZ,EAAQI,KAAkBO,EAC1BX,EAAQI,KAAkBS,IACxBV,EAcR,OATAhF,EAAI6E,QAAUA,EACV/E,EAAa0C,KACfxC,EAAID,WAAWyC,GAAK,IAAIjC,oBAAkB,CACxCC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQ2B,KAILvC,EAGT,SAAS2F,EACPC,EACAlD,EACAsB,EACA6B,EACAC,GAQA,OANAF,EAAclD,KAAcmD,EAAa7B,GACzC4B,EAAclD,KAAcmD,EAAa7B,EAAI,GAC7C4B,EAAclD,KAAcmD,EAAa7B,EAAI,GAC7C4B,EAAclD,KAAcoD,EAAgB9B,GAC5C4B,EAAclD,KAAcoD,EAAgB9B,EAAI,GAChD4B,EAAclD,GAAYoD,EAAgB9B,EAAI,GACvC4B,EAGT,SAASG,EAA0BC,EAAcrD,EAASqB,EAAGxB,GAK3D,OAJAwD,EAAarD,KAAaH,EAAGwB,GAC7BgC,EAAarD,KAAaH,EAAGwB,EAAI,GACjCgC,EAAarD,KAAaH,EAAGwB,GAC7BgC,EAAarD,GAAWH,EAAGwB,EAAI,GACxBgC,EAGT,MAAMC,EAAsB,IAAIC,EAAAA,aAEhC,SAASC,EAA2B3E,EAAmBC,GACrD,MAAM2E,EAAe5E,EAAkB6E,cACjCC,EAAuB9E,EAAkB+E,iBACzCzG,EAAe0B,EAAkBE,cACjC8E,EAAYhF,EAAkBiF,gBAC9BC,EAAYlF,EAAkBmF,eAC9BhF,EAAYH,EAAkBI,WAE9BC,EAASJ,EAAgBI,OACzBC,EAAQL,EAAgBK,MAE9B,IAAIkC,EAEJ,GAAIoC,EAAc,CAChB,MAAMQ,EAAkBV,EAAAA,aAAaW,MACnC/G,EACAmG,GAEFW,EAAgB9F,QAAS,EACzBU,EAAkBE,cAAgBkF,EAGpC,MAAME,EAAevF,EAAmBC,EAAmBC,GAEvD2E,IACF5E,EAAkBE,cAAgB5B,GAGpC,IAAI+F,EAAekB,EAAAA,gBAAgBC,sBACjCF,EAAa/G,WAAWO,SAASM,OACjC8F,EACA/E,GACA,GAEFkE,EAAe,IAAIxD,aAAawD,GAChC,IAAIhC,EAASgC,EAAahC,OAC1B,MAAMoD,EAAqB,EAATpD,EACZhD,EAAY,IAAIwB,aAAa4E,GACnCpG,EAAUqG,IAAIrB,GACd,MAAMC,EAAkBiB,EAAAA,gBAAgBC,sBACtCF,EAAa/G,WAAWO,SAASM,OACjC4F,EACA7E,GAEFd,EAAUqG,IAAIpB,EAAiBjC,GAC/BiD,EAAa/G,WAAWO,SAASM,OAASC,EAE1C,MAAMG,EAAUlB,EAAagB,OAAS,IAAI2B,aAAawE,QAAa3E,EAC9DpB,EAAWpB,EAAamB,QAC1B,IAAIwB,aAAawE,QACjB3E,EACElB,EAAatB,EAAaqB,UAC5B,IAAIsB,aAAawE,QACjB3E,EACE6E,EAAWrH,EAAa0C,GAC1B,IAAIC,aAAcwE,EAAY,EAAK,QACnC3E,EACJ,IAAI8E,EACAC,EA2BAC,EA1BJ,GAAIxH,EAAagB,OAAQ,CAGvB,IAFAuG,EAAaP,EAAa/G,WAAWe,OAAOF,OAC5CI,EAAQkG,IAAIG,GACPrD,EAAI,EAAGA,EAAIH,EAAQG,IACtBqD,EAAWrD,IAAMqD,EAAWrD,GAE9BhD,EAAQkG,IAAIG,EAAYxD,GACxBiD,EAAa/G,WAAWe,OAAOF,OAASI,EAE1C,GAAIoF,EAAc,CAChBiB,EAAaP,EAAa/G,WAAWe,OAAOF,OACvCd,EAAagB,SAChBgG,EAAa/G,WAAWe,YAASwB,GAEnC,MAAMiF,EAAiB,IAAI9E,aAAawE,GACxC,IAAKjD,EAAI,EAAGA,EAAIH,EAAQG,IACtBqD,EAAWrD,IAAMqD,EAAWrD,GAE9BuD,EAAeL,IAAIG,EAAYxD,GAC/BiD,EAAa/G,WAAWyH,iBAAmB,IAAIjH,oBAAkB,CAC/DC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQ2G,IAKZ,MAAME,EAAaC,UAAQpB,GAC3B,GAAImB,EAAY,CACd,MAAMrF,EAAQyB,EAAS,EAAK,EAC5B,IAAI8D,EAAkB,IAAIC,WAAWxF,GACjCkE,IAAyBuB,EAAuBA,wBAACC,IACnDH,EAAkBI,EAASA,UAACJ,EAAiB,EAAG,EAAGvF,EAAO,IAE1DkF,EACEhB,IAAyBuB,EAAuBA,wBAACG,KAAO,EAAI,EAC9DL,EAAkBI,EAASA,UAACJ,EAAiBL,IAG/CR,EAAa/G,WAAWkI,YAAc,IAAI1H,oBAAkB,CAC1DC,kBAAmBC,EAAiBA,kBAACyH,cACrCvH,uBAAwB,EACxBC,OAAQ+G,IAIZ,GAAI7H,EAAamB,QAAS,CACxB,MAAMkH,EAAcrB,EAAa/G,WAAWkB,QAAQL,OAEpD,IADAM,EAASgG,IAAIiB,GACRnE,EAAI,EAAGA,EAAIH,EAAQG,IACtBmE,EAAYnE,IAAMmE,EAAYnE,GAEhC9C,EAASgG,IAAIiB,EAAatE,GAC1BiD,EAAa/G,WAAWkB,QAAQL,OAASM,EAE3C,GAAIpB,EAAaqB,UAAW,CAC1B,MAAMiH,EAAgBtB,EAAa/G,WAAWoB,UAAUP,OACxDQ,EAAW8F,IAAIkB,GACfhH,EAAW8F,IAAIkB,EAAevE,GAC9BiD,EAAa/G,WAAWoB,UAAUP,OAASQ,EAEzCtB,EAAa0C,KACf4E,EAAQN,EAAa/G,WAAWyC,GAAG5B,OACnCuG,EAASD,IAAIE,GACbD,EAASD,IAAIE,EAAQvD,EAAS,EAAK,GACnCiD,EAAa/G,WAAWyC,GAAG5B,OAASuG,GAGtC,MAAMtC,EAAUiC,EAAajC,QACvBwD,EAAgBxD,EAAQhB,OACxByE,EAAYzE,EAAS,EACrB0E,EAAazD,EAAAA,cAAcC,iBAC/BkC,EAAY,EACI,EAAhBoB,GAGF,IADAE,EAAWrB,IAAIrC,GACVb,EAAI,EAAGA,EAAIqE,EAAerE,GAAK,EAClCuE,EAAWvE,EAAIqE,GAAiBxD,EAAQb,EAAI,GAAKsE,EACjDC,EAAWvE,EAAI,EAAIqE,GAAiBxD,EAAQb,EAAI,GAAKsE,EACrDC,EAAWvE,EAAI,EAAIqE,GAAiBxD,EAAQb,GAAKsE,EAEnDxB,EAAajC,QAAU0D,EAEvB,MAAMxG,EAAWN,EAAgBM,SAC3BC,EAAWP,EAAgBO,SAEjC,IAAIG,EAAYN,EACZ2G,EAAkB,EAClBC,GAAqB,EACrBC,GAAU,EACVC,GAAkB,EAClB5G,IACFyG,GAAmB,EACnBrG,GAAa,EACbsG,IAAsB,EACtBC,IAAW,EACXC,IAAmB,GAEjB3G,IACFwG,GAAmB,EACnBrG,GAAa,EACbsG,IAAsB,EACtBC,IAAW,EACXC,IAAmB,GAErBF,IAAsBD,EAAkB1G,EAAQ,EAAIK,EAAYuG,GAEhE,MAAME,GAAqD,GAAxCH,GAAqBE,IAExC,IAAI/C,GAAgB,IAAIvD,aAAyB,EAAZuG,IACrC,MAAMC,GAAqBzC,EACvB,IAAI3D,aAAyB,EAAZmG,SACjBtG,EACJ,IAAIwG,GAAsBrB,EAAa,IAAIG,WAAWgB,SAAatG,EAC/D0D,GAAelG,EAAa0C,GAC5B,IAAIC,aAAyB,EAAZmG,SACjBtG,EAEJ,MAAMyG,GACJzC,IAAyBuB,EAAuBA,wBAACC,IAC/CL,IAAesB,KACjBzB,EAAchB,IAAyBuB,EAAAA,wBAAwBmB,IAAM,EAAI,EACzEF,GAAsBf,EAASA,UAACe,GAAqBxB,IAGvD,IAAI5E,GAAW,EACXC,GAAU,EACVsG,GAAqB,EACrBC,GAAkB,EACtB,MAAMC,GAAOrH,EAAQK,EACrB,IAAIiH,GACJ,IAAKpF,EAAI,EAAGA,EAAImF,GAAMnF,GAAKlC,EACzBsH,GAAa,EAAJpF,EACT4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACI,EAAJqB,EACAoD,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,GAIvB,GAAKlH,EA+BE,CACL,MAAMwD,EAAazD,EAAWoH,GAAO,EAAIA,GAGzC,IAFAC,GAAsB,EAAb5D,EAEJxB,EAAI,EAAGA,EAAI,EAAGA,IAEjB4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACa,EAAb6C,EACA4B,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,QA7DvB,IAAKlF,EAAImF,GAAOrH,EAAOkC,EAAImF,GAAMnF,IAC/BoF,GAAa,EAAJpF,EACT4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACI,EAAJqB,EACAoD,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,GAuCzB,IAAKlF,EAAImF,GAAO,EAAGnF,EAAI,EAAGA,GAAKlC,EAC7BsH,GAAa,EAAJpF,EACT4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACI,EAAJqB,EACAoD,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,GAIvB,GAAKnH,EA+BE,CACL,MAAMwD,EAAa4D,GAGnB,IAFAC,GAAsB,EAAb7D,EAEJvB,EAAI,EAAGA,EAAI,EAAGA,IAEjB4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACa,EAAb4C,EACA6B,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,QA7DvB,IAAKlF,EAAIlC,EAAQ,EAAGkC,GAAK,EAAGA,IAC1BoF,GAAa,EAAJpF,EACT4B,GAAgBD,EACdC,GACAlD,GACA0G,GACAvD,EACAC,GAEFpD,IAAY,EACR5C,EAAa0C,KACfwD,GAAeD,EACbC,GACArD,GACI,EAAJqB,EACAoD,GAEFzE,IAAW,GAETyD,IACF6C,IAAsB,EACtBJ,GAAmBI,MAAwB5B,EAAW+B,IACtDP,GAAmBI,MAAwB5B,EAAW+B,GAAS,GAC/DP,GAAmBI,MAAwB5B,EAAW+B,GAAS,IAE7DL,KACFD,GAAoBI,MAAqB,EACzCA,IAAmB,GAuCzB,IAAIlJ,GAhsBN,SAAiCa,EAAWf,EAAc6B,GACxD,MAAMkC,EAAShD,EAAUgD,OAEnB7C,EAAUlB,EAAagB,OAAS,IAAI2B,aAAaoB,QAAUvB,EAC3DpB,EAAWpB,EAAamB,QAAU,IAAIwB,aAAaoB,QAAUvB,EAC7DlB,EAAatB,EAAaqB,UAC5B,IAAIsB,aAAaoB,QACjBvB,EAEJ,IAAI+G,EAAc,EACdC,EAAe,EACfC,EAAiB,EACjBC,GAAkB,EAElBrI,EAAY9B,EACZ4B,EAAU7B,EACV0B,EAAS3B,EACb,GAAIW,EAAagB,QAAUhB,EAAamB,SAAWnB,EAAaqB,UAC9D,IAAK,IAAI6C,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAAG,CAClC,MAAMC,EAAI/E,EAAAA,WAAWgF,UAAUrD,EAAWmD,EAAG/E,GACvCwG,EAAKvG,aAAWgF,UAAUrD,GAAYmD,EAAI,GAAKH,EAAQxC,GAC7D,GAAImI,EAAiB,CACnB,MAAM9D,EAAKxG,aAAWgF,UAAUrD,GAAYmD,EAAI,GAAKH,EAAQvC,GAC7DpC,EAAAA,WAAWuK,SAAShE,EAAIxB,EAAGwB,GAC3BvG,EAAAA,WAAWuK,SAAS/D,EAAIzB,EAAGyB,GAC3B5E,EAAS5B,EAAAA,WAAWwF,UAAUxF,aAAWoF,MAAMoB,EAAID,EAAI3E,GAASA,GAChE0I,GAAkB,EAGhBtK,EAAAA,WAAWwK,cAAcjE,EAAIxB,EAAG0F,EAAAA,WAAWC,aAE7CJ,GAAkB,IAGhB1J,EAAamB,SAAWnB,EAAaqB,aACvCA,EAAYQ,EAAU0C,sBAAsBJ,EAAG9C,GAC3CrB,EAAamB,UACfA,EAAU/B,EAAUA,WAACwF,UACnBxF,EAAAA,WAAWoF,MAAMnD,EAAWL,EAAQG,GACpCA,KAKFnB,EAAagB,SACfE,EAAQqI,KAAiBvI,EAAOwC,EAChCtC,EAAQqI,KAAiBvI,EAAOyC,EAChCvC,EAAQqI,KAAiBvI,EAAO0C,EAChCxC,EAAQqI,KAAiBvI,EAAOwC,EAChCtC,EAAQqI,KAAiBvI,EAAOyC,EAChCvC,EAAQqI,KAAiBvI,EAAO0C,GAG9B1D,EAAamB,UACfC,EAASoI,KAAkBrI,EAAQqC,EACnCpC,EAASoI,KAAkBrI,EAAQsC,EACnCrC,EAASoI,KAAkBrI,EAAQuC,EACnCtC,EAASoI,KAAkBrI,EAAQqC,EACnCpC,EAASoI,KAAkBrI,EAAQsC,EACnCrC,EAASoI,KAAkBrI,EAAQuC,GAGjC1D,EAAaqB,YACfC,EAAWmI,KAAoBpI,EAAUmC,EACzClC,EAAWmI,KAAoBpI,EAAUoC,EACzCnC,EAAWmI,KAAoBpI,EAAUqC,EACzCpC,EAAWmI,KAAoBpI,EAAUmC,EACzClC,EAAWmI,KAAoBpI,EAAUoC,EACzCnC,EAAWmI,KAAoBpI,EAAUqC,GAK/C,OAAO3D,EAAiBC,EAAc,CACpCe,UAAWA,EACXG,QAASA,EACTE,SAAUA,EACVE,WAAYA,IAmnBJyI,CAAwBjE,GAAe9F,EAAc6B,GAE3D7B,EAAa0C,KACfxC,GAAID,WAAWyC,GAAK,IAAIjC,oBAAkB,CACxCC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQoF,MAGRI,IACFpG,GAAID,WAAWyH,iBAAmB,IAAIjH,oBAAkB,CACtDC,kBAAmBC,EAAiBA,kBAACM,MACrCJ,uBAAwB,EACxBC,OAAQiI,MAGRpB,IACFzH,GAAID,WAAWkI,YAAc,IAAI1H,oBAAkB,CACjDC,kBAAmBC,EAAiBA,kBAACyH,cACrCvH,uBAAwB,EACxBC,OAAQkI,MAIZ,MAAMgB,GAAchF,EAAAA,cAAcC,iBAChC6D,GACqB,EAArBH,IAGF,IAAItD,GACAC,GACAC,GACAC,GACJzB,EAAS+B,GAAc/B,OAAS,EAChC,IAAImB,GAAQ,EACZ,IAAKhB,EAAI,EAAGA,EAAIH,EAAS,EAAGG,GAAK,EAAG,CAClCmB,GAAYnB,EACZsB,IAAcH,GAAY,GAAKtB,EAC/B,MAAM4B,EAAKvG,EAAAA,WAAWgF,UAAU0B,GAA2B,EAAZT,GAAe9D,GACxDqE,EAAKxG,EAAAA,WAAWgF,UAAU0B,GAA4B,EAAbN,GAAgBhE,GAC3DpC,EAAAA,WAAWwK,cAAcjE,EAAIC,EAAIiE,EAAAA,WAAWC,aAGhDxE,IAAaD,GAAY,GAAKtB,EAC9BwB,IAAcD,GAAY,GAAKvB,EAC/BiG,GAAY9E,MAAWG,GACvB2E,GAAY9E,MAAWI,GACvB0E,GAAY9E,MAAWM,GACvBwE,GAAY9E,MAAWM,GACvBwE,GAAY9E,MAAWI,GACvB0E,GAAY9E,MAAWK,IAczB,OAXArF,GAAI6E,QAAUiF,GAEd9J,GAAM+J,EAAgBA,iBAACC,iBAAiB,CACtC,IAAIC,mBAAiB,CACnBC,SAAUpD,IAEZ,IAAImD,mBAAiB,CACnBC,SAAUlK,OAIPA,GAAI,GAGb,MAAMmK,EAAyB,CAC7B,IAAIjL,aACJ,IAAIA,aACJ,IAAIA,aACJ,IAAIA,cAEAkL,EAAY,IAAIC,EAAAA,aAChBC,EAAc,IAAID,EAAAA,aACxB,SAASE,EAAiBC,EAAWC,EAAaC,EAAU/I,EAAWgJ,GACrE,GAAiB,IAAbD,EACF,OAAOnL,YAAUsH,MAAM2D,EAAWG,GAGpC,MAAMlJ,EAAkB2B,EAAAA,yBAAyBwH,eAC/CJ,EACAC,EACAC,EACA,EACApL,EACA8K,GAGIvI,EAASJ,EAAgBI,OACzBC,EAAQL,EAAgBK,MAExBjB,EAAYsJ,EAkClB,OAjCA/G,EAAAA,yBAAyBC,gBACvB5B,EACAE,GACA,EACA,EACA,EACAd,EAAU,IAEZuC,EAAAA,yBAAyBC,gBACvB5B,EACAE,GACA,EACA,EACAG,EAAQ,EACRjB,EAAU,IAEZuC,EAAAA,yBAAyBC,gBACvB5B,EACAE,GACA,EACAE,EAAS,EACT,EACAhB,EAAU,IAEZuC,EAAAA,yBAAyBC,gBACvB5B,EACAE,GACA,EACAE,EAAS,EACTC,EAAQ,EACRjB,EAAU,IAGLtB,EAASA,UAACsL,mBAAmBhK,EAAWc,EAAWgJ,GA+C5D,SAASG,EAAkBC,GAGzB,MAAMP,GAFNO,EAAUC,EAAAA,aAAaD,EAASC,EAAYA,aAACC,eAEnBT,UAK1B,GAFAU,EAAAA,MAAMC,OAAOC,OAAO,YAAaZ,GACjCjL,YAAU8L,SAASb,GACfA,EAAUc,MAAQd,EAAUe,MAC9B,MAAM,IAAIC,EAAcA,eACtB,oFAKJ,MAAM3J,EAASmJ,EAAYA,aAACD,EAAQlJ,OAAQ,GACtC4J,EAAiBT,EAAYA,aAACD,EAAQU,eAAgB5J,GAE5D6J,KAAKC,WAAapM,EAAAA,UAAUsH,MAAM2D,GAClCkB,KAAKE,aAAeZ,EAAYA,aAC9BD,EAAQN,YACRd,EAAAA,WAAWkC,oBAEbH,KAAK9J,WAAakK,EAAAA,UAAUjF,MAC1BmE,EAAAA,aAAaD,EAAQpJ,UAAWmK,EAAAA,UAAUC,QAE5CL,KAAK/E,eAAiBlD,KAAKE,IAAI9B,EAAQ4J,GACvCC,KAAKM,UAAYhB,EAAYA,aAACD,EAAQL,SAAU,GAChDgB,KAAKO,YAAcjB,EAAYA,aAACD,EAAQmB,WAAY,GACpDR,KAAKhK,cAAgBwE,EAAAA,aAAaW,MAChCmE,EAAAA,aAAaD,EAAQjL,aAAcoG,EAAAA,aAAaiG,UAElDT,KAAKjF,gBAAkBhD,KAAKC,IAAI7B,EAAQ4J,GACxCC,KAAKrF,cAAgB2E,EAAYA,aAACD,EAAQ3E,cAAc,GACxDsF,KAAKU,YAAc,0BACnBV,KAAKnF,iBAAmBwE,EAAQpD,gBAChC+D,KAAKW,uBAAoB/J,EAEzBoJ,KAAKY,sCAAmChK,EAO1CwI,EAAkByB,aAChBhN,EAAAA,UAAUgN,aACVT,EAAAA,UAAUS,aACVrG,EAAAA,aAAaqG,aACb,EAWFzB,EAAkB0B,KAAO,SAAUC,EAAOC,EAAOC,GAyB/C,OAvBAzB,EAAAA,MAAMC,OAAOC,OAAO,QAASqB,GAC7BvB,EAAAA,MAAMxD,QAAQ,QAASgF,GAGvBC,EAAgB3B,EAAYA,aAAC2B,EAAe,GAE5CpN,EAASA,UAACiN,KAAKC,EAAMd,WAAYe,EAAOC,GACxCA,GAAiBpN,EAASA,UAACgN,aAE3BT,EAASA,UAACU,KAAKC,EAAM7K,WAAY8K,EAAOC,GACxCA,GAAiBb,EAASA,UAACS,aAE3BrG,EAAYA,aAACsG,KAAKC,EAAM/K,cAAegL,EAAOC,GAC9CA,GAAiBzG,EAAYA,aAACqG,aAE9BG,EAAMC,KAAmBF,EAAMb,aAC/Bc,EAAMC,KAAmBF,EAAM9F,eAC/B+F,EAAMC,KAAmBF,EAAMT,UAC/BU,EAAMC,KAAmBF,EAAMR,YAC/BS,EAAMC,KAAmBF,EAAMhG,gBAC/BiG,EAAMC,KAAmBF,EAAMpG,cAAgB,EAAM,EACrDqG,EAAMC,GAAiB3B,EAAYA,aAACyB,EAAMlG,kBAAmB,GAEtDmG,GAGT,MAAME,EAAmB,IAAIrN,EAAAA,UACvBsN,EAAmBf,EAAAA,UAAUjF,MAAMiF,EAASA,UAACgB,aAC7CC,EAAiB,CACrBvC,UAAWoC,EACXjL,UAAWkL,EACX/M,aAAcmG,EACdwE,iBAAanI,EACbT,YAAQS,EACRoI,cAAUpI,EACV4J,gBAAY5J,EACZmJ,oBAAgBnJ,EAChB8D,kBAAc9D,EACdqF,qBAAiBrF,GAWnBwI,EAAkBkC,OAAS,SAAUN,EAAOC,EAAehC,GAEzDO,EAAAA,MAAMxD,QAAQ,QAASgF,GAGvBC,EAAgB3B,EAAYA,aAAC2B,EAAe,GAE5C,MAAMnC,EAAYjL,EAAAA,UAAUyN,OAAON,EAAOC,EAAeC,GACzDD,GAAiBpN,EAASA,UAACgN,aAE3B,MAAM5K,EAAYmK,EAAAA,UAAUkB,OAAON,EAAOC,EAAeE,GACzDF,GAAiBb,EAASA,UAACS,aAE3B,MAAMzM,EAAeoG,EAAAA,aAAa8G,OAChCN,EACAC,EACA1G,GAEF0G,GAAiBzG,EAAYA,aAACqG,aAE9B,MAAM9B,EAAciC,EAAMC,KACpBM,EAAgBP,EAAMC,KACtBjC,EAAWgC,EAAMC,KACjBT,EAAaQ,EAAMC,KACnBlB,EAAiBiB,EAAMC,KACvBvG,EAA0C,IAA3BsG,EAAMC,KACrBhF,EAAkB+E,EAAMC,GAE9B,OAAKjF,EAAAA,QAAQiD,IAabA,EAAOgB,WAAapM,YAAUsH,MAAM2D,EAAWG,EAAOgB,YACtDhB,EAAO/I,WAAakK,YAAUjF,MAAMlF,EAAWgJ,EAAO/I,YACtD+I,EAAOjJ,cAAgBwE,eAAaW,MAAM/G,EAAc6K,EAAOjJ,eAC/DiJ,EAAOiB,aAAenB,EACtBE,EAAOhE,eAAiBsG,EACxBtC,EAAOqB,UAAYtB,EACnBC,EAAOsB,YAAcC,EACrBvB,EAAOlE,gBAAkBgF,EACzBd,EAAOtE,cAAgBD,EACvBuE,EAAOpE,kBACgB,IAArBoB,OAAyBrF,EAAYqF,EAEhCgD,IAxBLoC,EAAetC,YAAcA,EAC7BsC,EAAelL,OAASoL,EACxBF,EAAerC,SAAWA,EAC1BqC,EAAeb,WAAaA,EAC5Ba,EAAetB,eAAiBA,EAChCsB,EAAe3G,aAAeA,EAC9B2G,EAAepF,iBACQ,IAArBA,OAAyBrF,EAAYqF,EAEhC,IAAImD,EAAkBiC,KA8BjCjC,EAAkBP,iBAAmB,SAAUQ,EAASJ,GAGtD,MAAMH,GAFNO,EAAUC,EAAAA,aAAaD,EAASC,EAAYA,aAACC,eAEnBT,UAK1B,GAFAU,EAAAA,MAAMC,OAAOC,OAAO,YAAaZ,GACjCjL,YAAU8L,SAASb,GACfA,EAAUc,MAAQd,EAAUe,MAC9B,MAAM,IAAIC,EAAcA,eACtB,oFAKJ,MAAMf,EAAcO,EAAYA,aAC9BD,EAAQN,YACRd,EAAAA,WAAWkC,oBAEPlK,EAAYqJ,EAAAA,aAAaD,EAAQpJ,UAAWmK,EAAAA,UAAUC,OAG5D,OAAOxB,EAAiBC,EAAWC,EAFlBO,EAAYA,aAACD,EAAQL,SAAU,GAEU/I,EAAWgJ,IAGvE,MAAMuC,EAA+B,IAAI1I,EAAAA,QACnC2I,EAAoB,IAAIC,EAAAA,WACxBC,EAAgB,IAAIhD,EAAAA,aAS1BS,EAAkBwC,eAAiB,SAAU9L,GAC3C,GACEmI,EAAAA,WAAWD,cACTlI,EAAkBmK,WAAWL,MAC7B9J,EAAkBmK,WAAWJ,MAC7B5B,EAAAA,WAAWC,YAEbD,EAAAA,WAAWD,cACTlI,EAAkBmK,WAAW4B,KAC7B/L,EAAkBmK,WAAW6B,KAC7B7D,EAAAA,WAAWC,WAGb,OAGF,IAAIY,EAAYhJ,EAAkBmK,WAClC,MAAMhK,EAAYH,EAAkBI,WAC9B8I,EAAWlJ,EAAkBwK,UAC7BE,EAAa1K,EAAkByK,YAC/BnM,EAAe0B,EAAkBE,cAEjCD,EAAkB2B,EAAAA,yBAAyBwH,eAC/CJ,EACAhJ,EAAkBoK,aAClBlB,EACAwB,EACA5M,EACA8K,EACAE,GAGIxG,EAAwBoJ,EAC9B,GAAmB,IAAfhB,GAAiC,IAAbxB,EAAgB,CACtC,MAAM+C,EAASlO,EAASA,UAACkO,OAAOjD,EAAW6C,GACrCK,EAAO/L,EAAUgM,kCAAkCF,EAAQpM,GACjE+L,EAAAA,WAAWQ,cAAcF,GAAOxB,EAAYiB,GAC5C3I,EAAAA,QAAQqJ,eAAeV,EAAmBrJ,QAE1CU,EAAAA,QAAQqC,MAAMrC,EAAAA,QAAQsJ,SAAUhK,GAGlC,MAAMmJ,EAAgBzL,EAAkBmF,eAClC8E,EAAiBjK,EAAkBiF,gBACnCsH,GAAWpE,EAAAA,WAAWD,cAC1BuD,EACAxB,EACA,EACA9B,EAAAA,WAAWqE,UAOb,IAAI9D,EACA+D,EAEJ,GAPAxM,EAAgByM,UAAY,EAAM1M,EAAkBmK,WAAW7J,MAC/DL,EAAgB0M,UAAY,EAAM3M,EAAkBmK,WAAW9J,OAC/DJ,EAAgBqC,sBAAwBA,EAIxC0G,EAAYhJ,EAAkBmK,WAC1BoC,EAAS,CACX7D,EAAW/D,EAA2B3E,EAAmBC,GACzD,MAAM2M,EAAQzO,EAAAA,eAAe0O,gBAC3B7D,EACA7I,EACAsL,EACArN,GAEI0O,EAAW3O,EAAAA,eAAe0O,gBAC9B7D,EACA7I,EACA8J,EACA/L,GAEFuO,EAAiBtO,EAAAA,eAAe4O,MAAMH,EAAOE,OACxC,CASL,GARApE,EAAW3I,EAAmBC,EAAmBC,GACjDyI,EAASnK,WAAWO,SAASM,OAASmG,EAAeA,gBAACC,sBACpDkD,EAASnK,WAAWO,SAASM,OAC7BqM,EACAtL,GACA,GAGE+F,EAAOA,QAAClG,EAAkB+E,kBAAmB,CAC/C,MAAM1C,EAASqG,EAASnK,WAAWO,SAASM,OAAOiD,OAC7CoE,EAAc,IAAIL,WAAW/D,EAAS,GACtCyD,EACJ9F,EAAkB+E,mBAAqBsB,EAAAA,wBAAwBG,KAC3D,EACA,EACND,YAAUE,EAAaX,GACvB4C,EAASnK,WAAWkI,YAAc,IAAI1H,oBAAkB,CACtDC,kBAAmBC,EAAiBA,kBAACyH,cACrCvH,uBAAwB,EACxBC,OAAQqH,IAIZgG,EAAiBtO,EAAcA,eAAC0O,gBAC9B7D,EACA7I,EACAsL,GAQJ,OAJKnN,EAAaQ,iBACT4J,EAASnK,WAAWO,SAGtB,IAAIL,EAAAA,SAAS,CAClBF,WAAYmK,EAASnK,WACrB8E,QAASqF,EAASrF,QAClB1E,cAAe+J,EAAS/J,cACxB8N,eAAgBA,EAChBtG,gBAAiBnG,EAAkB+E,oBAOvCuE,EAAkB0D,mBAAqB,SACrChN,EACAiN,EACAC,GAEA,MAAMjE,EAAcjJ,EAAkBoK,aAChCjK,EAAYH,EAAkBI,WAE9B4E,EAAYiI,EAAchE,EAAa9I,GACvC+E,EAAYgI,EAAcjE,EAAa9I,GAE7C,OAAO,IAAImJ,EAAkB,CAC3BN,UAAWhJ,EAAkBmK,WAC7BjB,SAAUlJ,EAAkBwK,UAC5BrK,UAAWA,EACXuK,WAAY1K,EAAkByK,YAC9BxB,YAAaA,EACbgB,eAAgB/E,EAChB7E,OAAQ2E,EACR1G,aAAcoG,EAAYA,aAACyI,cAC3BvI,cAAc,KAIlB,MAAMwI,EAAmC,IAAIrP,EAAAA,UACvCsP,EAAkB,CAAC,IAAIpP,aAAc,IAAIA,EAAAA,WAAc,IAAIA,EAAUA,YACrEqP,EAAoB,IAAIC,EAAAA,QACxBC,EAAyB,IAAI3E,EAAAA,oBA6EnC4E,OAAOC,iBAAiBpE,EAAkBqE,UAAW,CAInD3E,UAAW,CACT4E,IAAK,WASH,OARK1H,EAAOA,QAACgE,KAAKW,qBAChBX,KAAKW,kBAAoB9B,EACvBmB,KAAKC,WACLD,KAAKE,aACLF,KAAKM,UACLN,KAAK9J,aAGF8J,KAAKW,oBAUhBgD,gCAAiC,CAC/BD,IAAK,WAMH,OALK1H,EAAOA,QAACgE,KAAKY,oCAChBZ,KAAKY,iCAtGb,SAAyC9K,GACvC,GAAsC,IAAlCA,EAAkByK,YACpB,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAGzB,MAAMzB,EAAYjL,EAAAA,UAAUsH,MAC1BrF,EAAkBmK,WAClBiD,GAEInE,EAAcjJ,EAAkBoK,aAChCjK,EAAYH,EAAkBI,WAK9B0N,EAA4B/E,EAChCC,EACAC,EAJejJ,EAAkBwK,UAAYxK,EAAkByK,YAM/DtK,EACAiN,GAWIW,EAAWV,EACjBU,EAAS,GAAGjM,EAAIgM,EAA0B9B,KAC1C+B,EAAS,GAAGhM,EAAI+L,EAA0B/D,MAE1CgE,EAAS,GAAGjM,EAAIgM,EAA0B9B,KAC1C+B,EAAS,GAAGhM,EAAI+L,EAA0BhE,MAE1CiE,EAAS,GAAGjM,EAAIgM,EAA0B/B,KAC1CgC,EAAS,GAAGhM,EAAI+L,EAA0B/D,MAE1C,MAAMiE,EAAoBhO,EAAkBgJ,UACtCiF,EAAsBV,EAAAA,QAAQW,aAClClO,EAAkByK,YAClB6C,GAEIa,EAA0BpQ,EAAAA,UAAUkO,OACxC+B,EACAR,GAGF,IAAK,IAAIhL,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,MAAM4L,EAAUL,EAASvL,GACzB4L,EAAQtM,GAAKqM,EAAwBE,UACrCD,EAAQrM,GAAKoM,EAAwBG,SACrCf,EAAAA,QAAQtK,iBAAiBgL,EAAqBG,EAASA,GACvDA,EAAQtM,GAAKqM,EAAwBE,UACrCD,EAAQrM,GAAKoM,EAAwBG,SAGrCF,EAAQtM,GAAKsM,EAAQtM,EAAIkM,EAAkBhC,MAAQgC,EAAkB1N,MACrE8N,EAAQrM,GACLqM,EAAQrM,EAAIiM,EAAkBjE,OAASiE,EAAkB3N,OAG9D,MAAMkO,EAAcR,EAAS,GACvBS,EAAaT,EAAS,GACtBU,EAAaV,EAAS,GACtB5E,EAAS,IAAIuF,MAAM,GAIzB,OAHAzQ,EAAAA,WAAW+M,KAAKuD,EAAapF,GAC7BlL,EAAAA,WAAW+M,KAAKwD,EAAYrF,EAAQ,GACpClL,EAAAA,WAAW+M,KAAKyD,EAAYtF,EAAQ,GAC7BA,EA8BuC0E,CACtC3D,OAGGA,KAAKY,qCCz8ClB,SAAiC9K,EAAmB2O,GAMlD,OALIzI,EAAAA,QAAQyI,KACV3O,EAAoBsJ,EAAkBkC,OAAOxL,EAAmB2O,IAElE3O,EAAkBI,WAAakK,EAASA,UAACjF,MAAMrF,EAAkBI,YACjEJ,EAAkBmK,WAAapM,EAASA,UAACsH,MAAMrF,EAAkBmK,YAC1Db,EAAkBwC,eAAe9L"}