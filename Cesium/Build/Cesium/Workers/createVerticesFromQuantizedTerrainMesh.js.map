{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/Core/TerrainProvider.js","../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\n * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainProvider\n * @constructor\n *\n * @see EllipsoidTerrainProvider\n * @see CesiumTerrainProvider\n * @see VRTheWorldTerrainProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n */\nfunction TerrainProvider() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof TerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain. This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof TerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\nconst regularGridIndicesCache = [];\n\n/**\n * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\n * this function multiple times with the same grid width and height returns the\n * same list of indices.  The total number of vertices must be less than or equal\n * to 65536.\n *\n * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\n * @param {Number} height The number of vertices in the regular grid in the vertical direction.\n * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\n */\nTerrainProvider.getRegularGridIndices = function (width, height) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  let byWidth = regularGridIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridIndicesCache[width] = byWidth = [];\n  }\n\n  let indices = byWidth[height];\n  if (!defined(indices)) {\n    if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\n      indices = byWidth[height] = new Uint16Array(\n        (width - 1) * (height - 1) * 6\n      );\n    } else {\n      indices = byWidth[height] = new Uint32Array(\n        (width - 1) * (height - 1) * 6\n      );\n    }\n    addRegularGridIndices(width, height, indices, 0);\n  }\n\n  return indices;\n};\n\nconst regularGridAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridIndicesAndEdgeIndices = function (width, height) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  let byWidth = regularGridAndEdgeIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  let indicesAndEdges = byWidth[height];\n  if (!defined(indicesAndEdges)) {\n    const indices = TerrainProvider.getRegularGridIndices(width, height);\n\n    const edgeIndices = getEdgeIndices(width, height);\n    const westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    const southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    const eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    const northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\nconst regularGridAndSkirtAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function (\n  width,\n  height\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  let byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  let indicesAndEdges = byWidth[height];\n  if (!defined(indicesAndEdges)) {\n    const gridVertexCount = width * height;\n    const gridIndexCount = (width - 1) * (height - 1) * 6;\n    const edgeVertexCount = width * 2 + height * 2;\n    const edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\n    const vertexCount = gridVertexCount + edgeVertexCount;\n    const indexCount = gridIndexCount + edgeIndexCount;\n\n    const edgeIndices = getEdgeIndices(width, height);\n    const westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    const southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    const eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    const northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    const indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\n    addRegularGridIndices(width, height, indices, 0);\n    TerrainProvider.addSkirtIndices(\n      westIndicesSouthToNorth,\n      southIndicesEastToWest,\n      eastIndicesNorthToSouth,\n      northIndicesWestToEast,\n      gridVertexCount,\n      indices,\n      gridIndexCount\n    );\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n      indexCountWithoutSkirts: gridIndexCount,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\n/**\n * @private\n */\nTerrainProvider.addSkirtIndices = function (\n  westIndicesSouthToNorth,\n  southIndicesEastToWest,\n  eastIndicesNorthToSouth,\n  northIndicesWestToEast,\n  vertexCount,\n  indices,\n  offset\n) {\n  let vertexIndex = vertexCount;\n  offset = addSkirtIndices(\n    westIndicesSouthToNorth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += westIndicesSouthToNorth.length;\n  offset = addSkirtIndices(\n    southIndicesEastToWest,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += southIndicesEastToWest.length;\n  offset = addSkirtIndices(\n    eastIndicesNorthToSouth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += eastIndicesNorthToSouth.length;\n  addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\n};\n\nfunction getEdgeIndices(width, height) {\n  const westIndicesSouthToNorth = new Array(height);\n  const southIndicesEastToWest = new Array(width);\n  const eastIndicesNorthToSouth = new Array(height);\n  const northIndicesWestToEast = new Array(width);\n\n  let i;\n  for (i = 0; i < width; ++i) {\n    northIndicesWestToEast[i] = i;\n    southIndicesEastToWest[i] = width * height - 1 - i;\n  }\n\n  for (i = 0; i < height; ++i) {\n    eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\n    westIndicesSouthToNorth[i] = (height - i - 1) * width;\n  }\n\n  return {\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\n    southIndicesEastToWest: southIndicesEastToWest,\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n    northIndicesWestToEast: northIndicesWestToEast,\n  };\n}\n\nfunction addRegularGridIndices(width, height, indices, offset) {\n  let index = 0;\n  for (let j = 0; j < height - 1; ++j) {\n    for (let i = 0; i < width - 1; ++i) {\n      const upperLeft = index;\n      const lowerLeft = upperLeft + width;\n      const lowerRight = lowerLeft + 1;\n      const upperRight = upperLeft + 1;\n\n      indices[offset++] = upperLeft;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = upperRight;\n      indices[offset++] = upperRight;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = lowerRight;\n\n      ++index;\n    }\n    ++index;\n  }\n}\n\nfunction addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\n  let previousIndex = edgeIndices[0];\n\n  const length = edgeIndices.length;\n  for (let i = 1; i < length; ++i) {\n    const index = edgeIndices[i];\n\n    indices[offset++] = previousIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex;\n\n    indices[offset++] = vertexIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex + 1;\n\n    previousIndex = index;\n    ++vertexIndex;\n  }\n\n  return offset;\n}\n\n/**\n * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\n * ensure that adjacent heightmap vertices are separated by no more than\n * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\n * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\n * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\n * @type {Number}\n */\nTerrainProvider.heightmapTerrainQuality = 0.25;\n\n/**\n * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\n * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\n * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\n * @returns {Number} An estimated geometric error.\n */\nTerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function (\n  ellipsoid,\n  tileImageWidth,\n  numberOfTilesAtLevelZero\n) {\n  return (\n    (ellipsoid.maximumRadius *\n      2 *\n      Math.PI *\n      TerrainProvider.heightmapTerrainQuality) /\n    (tileImageWidth * numberOfTilesAtLevelZero)\n  );\n};\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nTerrainProvider.prototype.requestTileGeometry =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\n * called before {@link TerrainProvider#ready} returns true.\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nTerrainProvider.prototype.getLevelMaximumGeometricError =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Determines whether data for a tile is available to be loaded.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported by the terrain provider, otherwise true or false.\n */\nTerrainProvider.prototype.getTileDataAvailable =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Makes sure we load availability data for a tile\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nTerrainProvider.prototype.loadTileDataAvailability =\n  DeveloperError.throwInstantiationError;\nexport default TerrainProvider;\n","import AxisAlignedBoundingBox from \"../Core/AxisAlignedBoundingBox.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport EllipsoidalOccluder from \"../Core/EllipsoidalOccluder.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport TerrainEncoding from \"../Core/TerrainEncoding.js\";\nimport TerrainProvider from \"../Core/TerrainProvider.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\n\nconst maxShort = 32767;\n\nconst cartesian3Scratch = new Cartesian3();\nconst scratchMinimum = new Cartesian3();\nconst scratchMaximum = new Cartesian3();\nconst cartographicScratch = new Cartographic();\nconst toPack = new Cartesian2();\n\nfunction createVerticesFromQuantizedTerrainMesh(\n  parameters,\n  transferableObjects\n) {\n  const quantizedVertices = parameters.quantizedVertices;\n  const quantizedVertexCount = quantizedVertices.length / 3;\n  const octEncodedNormals = parameters.octEncodedNormals;\n  const edgeVertexCount =\n    parameters.westIndices.length +\n    parameters.eastIndices.length +\n    parameters.southIndices.length +\n    parameters.northIndices.length;\n  const includeWebMercatorT = parameters.includeWebMercatorT;\n\n  const exaggeration = parameters.exaggeration;\n  const exaggerationRelativeHeight = parameters.exaggerationRelativeHeight;\n  const hasExaggeration = exaggeration !== 1.0;\n  const includeGeodeticSurfaceNormals = hasExaggeration;\n\n  const rectangle = Rectangle.clone(parameters.rectangle);\n  const west = rectangle.west;\n  const south = rectangle.south;\n  const east = rectangle.east;\n  const north = rectangle.north;\n\n  const ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\n\n  const minimumHeight = parameters.minimumHeight;\n  const maximumHeight = parameters.maximumHeight;\n\n  const center = parameters.relativeToCenter;\n  const fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\n  const toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\n\n  let southMercatorY;\n  let oneOverMercatorHeight;\n  if (includeWebMercatorT) {\n    southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n      south\n    );\n    oneOverMercatorHeight =\n      1.0 /\n      (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) -\n        southMercatorY);\n  }\n\n  const uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\n  const vBuffer = quantizedVertices.subarray(\n    quantizedVertexCount,\n    2 * quantizedVertexCount\n  );\n  const heightBuffer = quantizedVertices.subarray(\n    quantizedVertexCount * 2,\n    3 * quantizedVertexCount\n  );\n  const hasVertexNormals = defined(octEncodedNormals);\n\n  const uvs = new Array(quantizedVertexCount);\n  const heights = new Array(quantizedVertexCount);\n  const positions = new Array(quantizedVertexCount);\n  const webMercatorTs = includeWebMercatorT\n    ? new Array(quantizedVertexCount)\n    : [];\n  const geodeticSurfaceNormals = includeGeodeticSurfaceNormals\n    ? new Array(quantizedVertexCount)\n    : [];\n\n  const minimum = scratchMinimum;\n  minimum.x = Number.POSITIVE_INFINITY;\n  minimum.y = Number.POSITIVE_INFINITY;\n  minimum.z = Number.POSITIVE_INFINITY;\n\n  const maximum = scratchMaximum;\n  maximum.x = Number.NEGATIVE_INFINITY;\n  maximum.y = Number.NEGATIVE_INFINITY;\n  maximum.z = Number.NEGATIVE_INFINITY;\n\n  let minLongitude = Number.POSITIVE_INFINITY;\n  let maxLongitude = Number.NEGATIVE_INFINITY;\n  let minLatitude = Number.POSITIVE_INFINITY;\n  let maxLatitude = Number.NEGATIVE_INFINITY;\n\n  for (let i = 0; i < quantizedVertexCount; ++i) {\n    const rawU = uBuffer[i];\n    const rawV = vBuffer[i];\n\n    const u = rawU / maxShort;\n    const v = rawV / maxShort;\n    const height = CesiumMath.lerp(\n      minimumHeight,\n      maximumHeight,\n      heightBuffer[i] / maxShort\n    );\n\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\n    cartographicScratch.height = height;\n\n    minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\n    maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\n    minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\n    maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\n\n    const position = ellipsoid.cartographicToCartesian(cartographicScratch);\n\n    uvs[i] = new Cartesian2(u, v);\n    heights[i] = height;\n    positions[i] = position;\n\n    if (includeWebMercatorT) {\n      webMercatorTs[i] =\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n          cartographicScratch.latitude\n        ) -\n          southMercatorY) *\n        oneOverMercatorHeight;\n    }\n\n    if (includeGeodeticSurfaceNormals) {\n      geodeticSurfaceNormals[i] = ellipsoid.geodeticSurfaceNormal(position);\n    }\n\n    Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\n\n    Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\n    Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\n  }\n\n  const westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (\n    a,\n    b\n  ) {\n    return uvs[a].y - uvs[b].y;\n  });\n  const eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (\n    a,\n    b\n  ) {\n    return uvs[b].y - uvs[a].y;\n  });\n  const southIndicesEastToWest = copyAndSort(parameters.southIndices, function (\n    a,\n    b\n  ) {\n    return uvs[b].x - uvs[a].x;\n  });\n  const northIndicesWestToEast = copyAndSort(parameters.northIndices, function (\n    a,\n    b\n  ) {\n    return uvs[a].x - uvs[b].x;\n  });\n\n  let occludeePointInScaledSpace;\n  if (minimumHeight < 0.0) {\n    // Horizon culling point needs to be recomputed since the tile is at least partly under the ellipsoid.\n    const occluder = new EllipsoidalOccluder(ellipsoid);\n    occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(\n      center,\n      positions,\n      minimumHeight\n    );\n  }\n\n  let hMin = minimumHeight;\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.westIndices,\n      parameters.westSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.southIndices,\n      parameters.southSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.eastIndices,\n      parameters.eastSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.northIndices,\n      parameters.northSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n\n  const aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\n  const encoding = new TerrainEncoding(\n    center,\n    aaBox,\n    hMin,\n    maximumHeight,\n    fromENU,\n    hasVertexNormals,\n    includeWebMercatorT,\n    includeGeodeticSurfaceNormals,\n    exaggeration,\n    exaggerationRelativeHeight\n  );\n  const vertexStride = encoding.stride;\n  const size =\n    quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\n  const vertexBuffer = new Float32Array(size);\n\n  let bufferIndex = 0;\n  for (let j = 0; j < quantizedVertexCount; ++j) {\n    if (hasVertexNormals) {\n      const n = j * 2.0;\n      toPack.x = octEncodedNormals[n];\n      toPack.y = octEncodedNormals[n + 1];\n    }\n\n    bufferIndex = encoding.encode(\n      vertexBuffer,\n      bufferIndex,\n      positions[j],\n      uvs[j],\n      heights[j],\n      toPack,\n      webMercatorTs[j],\n      geodeticSurfaceNormals[j]\n    );\n  }\n\n  const edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\n  const indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\n  const indexBuffer = IndexDatatype.createTypedArray(\n    quantizedVertexCount + edgeVertexCount,\n    indexBufferLength\n  );\n  indexBuffer.set(parameters.indices, 0);\n\n  const percentage = 0.0001;\n  const lonOffset = (maxLongitude - minLongitude) * percentage;\n  const latOffset = (maxLatitude - minLatitude) * percentage;\n  const westLongitudeOffset = -lonOffset;\n  const westLatitudeOffset = 0.0;\n  const eastLongitudeOffset = lonOffset;\n  const eastLatitudeOffset = 0.0;\n  const northLongitudeOffset = 0.0;\n  const northLatitudeOffset = latOffset;\n  const southLongitudeOffset = 0.0;\n  const southLatitudeOffset = -latOffset;\n\n  // Add skirts.\n  let vertexBufferIndex = quantizedVertexCount * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    westIndicesSouthToNorth,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.westSkirtHeight,\n    southMercatorY,\n    oneOverMercatorHeight,\n    westLongitudeOffset,\n    westLatitudeOffset\n  );\n  vertexBufferIndex += parameters.westIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    southIndicesEastToWest,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.southSkirtHeight,\n    southMercatorY,\n    oneOverMercatorHeight,\n    southLongitudeOffset,\n    southLatitudeOffset\n  );\n  vertexBufferIndex += parameters.southIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    eastIndicesNorthToSouth,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.eastSkirtHeight,\n    southMercatorY,\n    oneOverMercatorHeight,\n    eastLongitudeOffset,\n    eastLatitudeOffset\n  );\n  vertexBufferIndex += parameters.eastIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    northIndicesWestToEast,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.northSkirtHeight,\n    southMercatorY,\n    oneOverMercatorHeight,\n    northLongitudeOffset,\n    northLatitudeOffset\n  );\n\n  TerrainProvider.addSkirtIndices(\n    westIndicesSouthToNorth,\n    southIndicesEastToWest,\n    eastIndicesNorthToSouth,\n    northIndicesWestToEast,\n    quantizedVertexCount,\n    indexBuffer,\n    parameters.indices.length\n  );\n\n  transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\n\n  return {\n    vertices: vertexBuffer.buffer,\n    indices: indexBuffer.buffer,\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\n    southIndicesEastToWest: southIndicesEastToWest,\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n    northIndicesWestToEast: northIndicesWestToEast,\n    vertexStride: vertexStride,\n    center: center,\n    minimumHeight: minimumHeight,\n    maximumHeight: maximumHeight,\n    occludeePointInScaledSpace: occludeePointInScaledSpace,\n    encoding: encoding,\n    indexCountWithoutSkirts: parameters.indices.length,\n  };\n}\n\nfunction findMinMaxSkirts(\n  edgeIndices,\n  edgeHeight,\n  heights,\n  uvs,\n  rectangle,\n  ellipsoid,\n  toENU,\n  minimum,\n  maximum\n) {\n  let hMin = Number.POSITIVE_INFINITY;\n\n  const north = rectangle.north;\n  const south = rectangle.south;\n  let east = rectangle.east;\n  const west = rectangle.west;\n\n  if (east < west) {\n    east += CesiumMath.TWO_PI;\n  }\n\n  const length = edgeIndices.length;\n  for (let i = 0; i < length; ++i) {\n    const index = edgeIndices[i];\n    const h = heights[index];\n    const uv = uvs[index];\n\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\n    cartographicScratch.height = h - edgeHeight;\n\n    const position = ellipsoid.cartographicToCartesian(\n      cartographicScratch,\n      cartesian3Scratch\n    );\n    Matrix4.multiplyByPoint(toENU, position, position);\n\n    Cartesian3.minimumByComponent(position, minimum, minimum);\n    Cartesian3.maximumByComponent(position, maximum, maximum);\n\n    hMin = Math.min(hMin, cartographicScratch.height);\n  }\n  return hMin;\n}\n\nfunction addSkirt(\n  vertexBuffer,\n  vertexBufferIndex,\n  edgeVertices,\n  encoding,\n  heights,\n  uvs,\n  octEncodedNormals,\n  ellipsoid,\n  rectangle,\n  skirtLength,\n  southMercatorY,\n  oneOverMercatorHeight,\n  longitudeOffset,\n  latitudeOffset\n) {\n  const hasVertexNormals = defined(octEncodedNormals);\n\n  const north = rectangle.north;\n  const south = rectangle.south;\n  let east = rectangle.east;\n  const west = rectangle.west;\n\n  if (east < west) {\n    east += CesiumMath.TWO_PI;\n  }\n\n  const length = edgeVertices.length;\n  for (let i = 0; i < length; ++i) {\n    const index = edgeVertices[i];\n    const h = heights[index];\n    const uv = uvs[index];\n\n    cartographicScratch.longitude =\n      CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\n    cartographicScratch.latitude =\n      CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\n    cartographicScratch.height = h - skirtLength;\n\n    const position = ellipsoid.cartographicToCartesian(\n      cartographicScratch,\n      cartesian3Scratch\n    );\n\n    if (hasVertexNormals) {\n      const n = index * 2.0;\n      toPack.x = octEncodedNormals[n];\n      toPack.y = octEncodedNormals[n + 1];\n    }\n\n    let webMercatorT;\n    if (encoding.hasWebMercatorT) {\n      webMercatorT =\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n          cartographicScratch.latitude\n        ) -\n          southMercatorY) *\n        oneOverMercatorHeight;\n    }\n\n    let geodeticSurfaceNormal;\n    if (encoding.hasGeodeticSurfaceNormals) {\n      geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(position);\n    }\n\n    vertexBufferIndex = encoding.encode(\n      vertexBuffer,\n      vertexBufferIndex,\n      position,\n      uv,\n      cartographicScratch.height,\n      toPack,\n      webMercatorT,\n      geodeticSurfaceNormal\n    );\n  }\n}\n\nfunction copyAndSort(typedArray, comparator) {\n  let copy;\n  if (typeof typedArray.slice === \"function\") {\n    copy = typedArray.slice();\n    if (typeof copy.sort !== \"function\") {\n      // Sliced typed array isn't sortable, so we can't use it.\n      copy = undefined;\n    }\n  }\n\n  if (!defined(copy)) {\n    copy = Array.prototype.slice.call(typedArray);\n  }\n\n  copy.sort(comparator);\n\n  return copy;\n}\nexport default createTaskProcessorWorker(\n  createVerticesFromQuantizedTerrainMesh\n);\n"],"names":["TerrainProvider","DeveloperError","throwInstantiationError","Object","defineProperties","prototype","errorEvent","get","credit","tilingScheme","ready","readyPromise","hasWaterMask","hasVertexNormals","availability","regularGridIndicesCache","getRegularGridIndices","width","height","CesiumMath","FOUR_GIGABYTES","byWidth","defined","indices","SIXTY_FOUR_KILOBYTES","Uint16Array","Uint32Array","addRegularGridIndices","regularGridAndEdgeIndicesCache","getRegularGridIndicesAndEdgeIndices","indicesAndEdges","edgeIndices","getEdgeIndices","westIndicesSouthToNorth","southIndicesEastToWest","eastIndicesNorthToSouth","northIndicesWestToEast","regularGridAndSkirtAndEdgeIndicesCache","Array","i","offset","index","j","upperLeft","lowerLeft","lowerRight","upperRight","addSkirtIndices","vertexIndex","previousIndex","length","getRegularGridAndSkirtIndicesAndEdgeIndices","gridVertexCount","gridIndexCount","edgeVertexCount","vertexCount","indexCount","Math","max","IndexDatatype","createTypedArray","indexCountWithoutSkirts","heightmapTerrainQuality","getEstimatedLevelZeroGeometricErrorForAHeightmap","ellipsoid","tileImageWidth","numberOfTilesAtLevelZero","maximumRadius","PI","requestTileGeometry","getLevelMaximumGeometricError","getTileDataAvailable","loadTileDataAvailability","maxShort","cartesian3Scratch","Cartesian3","scratchMinimum","scratchMaximum","cartographicScratch","Cartographic","toPack","Cartesian2","findMinMaxSkirts","edgeHeight","heights","uvs","rectangle","toENU","minimum","maximum","hMin","Number","POSITIVE_INFINITY","north","south","east","west","TWO_PI","h","uv","longitude","lerp","x","latitude","y","position","cartographicToCartesian","Matrix4","multiplyByPoint","minimumByComponent","maximumByComponent","min","addSkirt","vertexBuffer","vertexBufferIndex","edgeVertices","encoding","octEncodedNormals","skirtLength","southMercatorY","oneOverMercatorHeight","longitudeOffset","latitudeOffset","n","webMercatorT","geodeticSurfaceNormal","hasWebMercatorT","WebMercatorProjection","geodeticLatitudeToMercatorAngle","hasGeodeticSurfaceNormals","encode","copyAndSort","typedArray","comparator","copy","slice","sort","undefined","call","createTaskProcessorWorker","parameters","transferableObjects","quantizedVertices","quantizedVertexCount","westIndices","eastIndices","southIndices","northIndices","includeWebMercatorT","exaggeration","exaggerationRelativeHeight","includeGeodeticSurfaceNormals","Rectangle","clone","Ellipsoid","minimumHeight","maximumHeight","center","relativeToCenter","fromENU","Transforms","eastNorthUpToFixedFrame","inverseTransformation","uBuffer","subarray","vBuffer","heightBuffer","positions","webMercatorTs","geodeticSurfaceNormals","z","NEGATIVE_INFINITY","minLongitude","maxLongitude","minLatitude","maxLatitude","rawU","rawV","u","v","a","b","occludeePointInScaledSpace","EllipsoidalOccluder","computeHorizonCullingPointPossiblyUnderEllipsoid","westSkirtHeight","southSkirtHeight","eastSkirtHeight","northSkirtHeight","aaBox","AxisAlignedBoundingBox","TerrainEncoding","vertexStride","stride","Float32Array","bufferIndex","edgeTriangleCount","indexBufferLength","indexBuffer","set","percentage","lonOffset","latOffset","westLongitudeOffset","eastLongitudeOffset","northLatitudeOffset","southLatitudeOffset","push","buffer","vertices"],"mappings":"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"}