{"version":3,"file":"createCorridorGeometry.js","sources":["../../../../Source/Core/CorridorGeometry.js","../../../../Source/WorkersES6/createCorridorGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst cartesian1 = new Cartesian3();\nconst cartesian2 = new Cartesian3();\nconst cartesian3 = new Cartesian3();\nconst cartesian4 = new Cartesian3();\nconst cartesian5 = new Cartesian3();\nconst cartesian6 = new Cartesian3();\n\nconst scratch1 = new Cartesian3();\nconst scratch2 = new Cartesian3();\n\nfunction scaleToSurface(positions, ellipsoid) {\n  for (let i = 0; i < positions.length; i++) {\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n  }\n  return positions;\n}\n\nfunction addNormals(attr, normal, left, front, back, vertexFormat) {\n  const normals = attr.normals;\n  const tangents = attr.tangents;\n  const bitangents = attr.bitangents;\n  const forward = Cartesian3.normalize(\n    Cartesian3.cross(left, normal, scratch1),\n    scratch1\n  );\n  if (vertexFormat.normal) {\n    CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\n  }\n  if (vertexFormat.tangent) {\n    CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\n  }\n  if (vertexFormat.bitangent) {\n    CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\n  }\n}\n\nfunction combine(computedPositions, vertexFormat, ellipsoid) {\n  const positions = computedPositions.positions;\n  const corners = computedPositions.corners;\n  const endPositions = computedPositions.endPositions;\n  const computedLefts = computedPositions.lefts;\n  const computedNormals = computedPositions.normals;\n  const attributes = new GeometryAttributes();\n  let corner;\n  let leftCount = 0;\n  let rightCount = 0;\n  let i;\n  let indicesLength = 0;\n  let length;\n  for (i = 0; i < positions.length; i += 2) {\n    length = positions[i].length - 3;\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\n    indicesLength += length * 2;\n    rightCount += positions[i + 1].length - 3;\n  }\n  leftCount += 3; //add back count for end positions\n  rightCount += 3;\n  for (i = 0; i < corners.length; i++) {\n    corner = corners[i];\n    const leftSide = corners[i].leftPositions;\n    if (defined(leftSide)) {\n      length = leftSide.length;\n      leftCount += length;\n      indicesLength += length;\n    } else {\n      length = corners[i].rightPositions.length;\n      rightCount += length;\n      indicesLength += length;\n    }\n  }\n\n  const addEndPositions = defined(endPositions);\n  let endPositionLength;\n  if (addEndPositions) {\n    endPositionLength = endPositions[0].length - 3;\n    leftCount += endPositionLength;\n    rightCount += endPositionLength;\n    endPositionLength /= 3;\n    indicesLength += endPositionLength * 6;\n  }\n  const size = leftCount + rightCount;\n  const finalPositions = new Float64Array(size);\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(size)\n    : undefined;\n  const attr = {\n    normals: normals,\n    tangents: tangents,\n    bitangents: bitangents,\n  };\n  let front = 0;\n  let back = size - 1;\n  let UL, LL, UR, LR;\n  let normal = cartesian1;\n  let left = cartesian2;\n  let rightPos, leftPos;\n  const halfLength = endPositionLength / 2;\n\n  const indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\n  let index = 0;\n  if (addEndPositions) {\n    // add rounded end\n    leftPos = cartesian3;\n    rightPos = cartesian4;\n    const firstEndPositions = endPositions[0];\n    normal = Cartesian3.fromArray(computedNormals, 0, normal);\n    left = Cartesian3.fromArray(computedLefts, 0, left);\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength - 1 - i) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength + i) * 3,\n        rightPos\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LL = front / 3;\n      LR = LL + 1;\n      UL = (back - 2) / 3;\n      UR = UL - 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n  }\n\n  let posIndex = 0;\n  let compIndex = 0;\n  let rightEdge = positions[posIndex++]; //add first two edges\n  let leftEdge = positions[posIndex++];\n  finalPositions.set(rightEdge, front);\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n  left = Cartesian3.fromArray(computedLefts, compIndex, left);\n  let rightNormal;\n  let leftNormal;\n  length = leftEdge.length - 3;\n  for (i = 0; i < length; i += 3) {\n    rightNormal = ellipsoid.geodeticSurfaceNormal(\n      Cartesian3.fromArray(rightEdge, i, scratch1),\n      scratch1\n    );\n    leftNormal = ellipsoid.geodeticSurfaceNormal(\n      Cartesian3.fromArray(leftEdge, length - i, scratch2),\n      scratch2\n    );\n    normal = Cartesian3.normalize(\n      Cartesian3.add(rightNormal, leftNormal, normal),\n      normal\n    );\n    addNormals(attr, normal, left, front, back, vertexFormat);\n\n    LL = front / 3;\n    LR = LL + 1;\n    UL = (back - 2) / 3;\n    UR = UL - 1;\n    indices[index++] = UL;\n    indices[index++] = LL;\n    indices[index++] = UR;\n    indices[index++] = UR;\n    indices[index++] = LL;\n    indices[index++] = LR;\n\n    front += 3;\n    back -= 3;\n  }\n\n  rightNormal = ellipsoid.geodeticSurfaceNormal(\n    Cartesian3.fromArray(rightEdge, length, scratch1),\n    scratch1\n  );\n  leftNormal = ellipsoid.geodeticSurfaceNormal(\n    Cartesian3.fromArray(leftEdge, length, scratch2),\n    scratch2\n  );\n  normal = Cartesian3.normalize(\n    Cartesian3.add(rightNormal, leftNormal, normal),\n    normal\n  );\n  compIndex += 3;\n  for (i = 0; i < corners.length; i++) {\n    let j;\n    corner = corners[i];\n    const l = corner.leftPositions;\n    const r = corner.rightPositions;\n    let pivot;\n    let start;\n    let outsidePoint = cartesian6;\n    let previousPoint = cartesian3;\n    let nextPoint = cartesian4;\n    normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\n    if (defined(l)) {\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\n      back -= 3;\n      pivot = LR;\n      start = UR;\n      for (j = 0; j < l.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n        indices[index++] = pivot;\n        indices[index++] = start - j - 1;\n        indices[index++] = start - j;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          undefined,\n          back\n        );\n        previousPoint = Cartesian3.fromArray(\n          finalPositions,\n          (start - j - 1) * 3,\n          previousPoint\n        );\n        nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\n        left = Cartesian3.normalize(\n          Cartesian3.subtract(previousPoint, nextPoint, left),\n          left\n        );\n        addNormals(attr, normal, left, undefined, back, vertexFormat);\n        back -= 3;\n      }\n      outsidePoint = Cartesian3.fromArray(\n        finalPositions,\n        pivot * 3,\n        outsidePoint\n      );\n      previousPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, start * 3, previousPoint),\n        outsidePoint,\n        previousPoint\n      );\n      nextPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint),\n        outsidePoint,\n        nextPoint\n      );\n      left = Cartesian3.normalize(\n        Cartesian3.add(previousPoint, nextPoint, left),\n        left\n      );\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\n      front += 3;\n    } else {\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\n      front += 3;\n      pivot = UR;\n      start = LR;\n      for (j = 0; j < r.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n        indices[index++] = pivot;\n        indices[index++] = start + j;\n        indices[index++] = start + j + 1;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          front\n        );\n        previousPoint = Cartesian3.fromArray(\n          finalPositions,\n          pivot * 3,\n          previousPoint\n        );\n        nextPoint = Cartesian3.fromArray(\n          finalPositions,\n          (start + j) * 3,\n          nextPoint\n        );\n        left = Cartesian3.normalize(\n          Cartesian3.subtract(previousPoint, nextPoint, left),\n          left\n        );\n        addNormals(attr, normal, left, front, undefined, vertexFormat);\n        front += 3;\n      }\n      outsidePoint = Cartesian3.fromArray(\n        finalPositions,\n        pivot * 3,\n        outsidePoint\n      );\n      previousPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint),\n        outsidePoint,\n        previousPoint\n      );\n      nextPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, start * 3, nextPoint),\n        outsidePoint,\n        nextPoint\n      );\n      left = Cartesian3.normalize(\n        Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left),\n        left\n      );\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\n      back -= 3;\n    }\n    rightEdge = positions[posIndex++];\n    leftEdge = positions[posIndex++];\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\n    leftEdge.splice(leftEdge.length - 3, 3);\n    finalPositions.set(rightEdge, front);\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\n    length = leftEdge.length - 3;\n\n    compIndex += 3;\n    left = Cartesian3.fromArray(computedLefts, compIndex, left);\n    for (j = 0; j < leftEdge.length; j += 3) {\n      rightNormal = ellipsoid.geodeticSurfaceNormal(\n        Cartesian3.fromArray(rightEdge, j, scratch1),\n        scratch1\n      );\n      leftNormal = ellipsoid.geodeticSurfaceNormal(\n        Cartesian3.fromArray(leftEdge, length - j, scratch2),\n        scratch2\n      );\n      normal = Cartesian3.normalize(\n        Cartesian3.add(rightNormal, leftNormal, normal),\n        normal\n      );\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n    front -= 3;\n    back += 3;\n  }\n  normal = Cartesian3.fromArray(\n    computedNormals,\n    computedNormals.length - 3,\n    normal\n  );\n  addNormals(attr, normal, left, front, back, vertexFormat);\n\n  if (addEndPositions) {\n    // add rounded end\n    front += 3;\n    back -= 3;\n    leftPos = cartesian3;\n    rightPos = cartesian4;\n    const lastEndPositions = endPositions[1];\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        lastEndPositions,\n        (endPositionLength - i - 1) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n  }\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: finalPositions,\n  });\n\n  if (vertexFormat.st) {\n    const st = new Float32Array((size / 3) * 2);\n    let rightSt;\n    let leftSt;\n    let stIndex = 0;\n    if (addEndPositions) {\n      leftCount /= 3;\n      rightCount /= 3;\n      const theta = Math.PI / (endPositionLength + 1);\n      leftSt = 1 / (leftCount - endPositionLength + 1);\n      rightSt = 1 / (rightCount - endPositionLength + 1);\n      let a;\n      const halfEndPos = endPositionLength / 2;\n      for (i = halfEndPos + 1; i < endPositionLength + 1; i++) {\n        // lower left rounded end\n        a = CesiumMath.PI_OVER_TWO + theta * i;\n        st[stIndex++] = rightSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = 1; i < rightCount - endPositionLength + 1; i++) {\n        // bottom edge\n        st[stIndex++] = i * rightSt;\n        st[stIndex++] = 0;\n      }\n      for (i = endPositionLength; i > halfEndPos; i--) {\n        // lower right rounded end\n        a = CesiumMath.PI_OVER_TWO - i * theta;\n        st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = halfEndPos; i > 0; i--) {\n        // upper right rounded end\n        a = CesiumMath.PI_OVER_TWO - theta * i;\n        st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = leftCount - endPositionLength; i > 0; i--) {\n        // top edge\n        st[stIndex++] = i * leftSt;\n        st[stIndex++] = 1;\n      }\n      for (i = 1; i < halfEndPos + 1; i++) {\n        // upper left rounded end\n        a = CesiumMath.PI_OVER_TWO + theta * i;\n        st[stIndex++] = leftSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n    } else {\n      leftCount /= 3;\n      rightCount /= 3;\n      leftSt = 1 / (leftCount - 1);\n      rightSt = 1 / (rightCount - 1);\n      for (i = 0; i < rightCount; i++) {\n        // bottom edge\n        st[stIndex++] = i * rightSt;\n        st[stIndex++] = 0;\n      }\n      for (i = leftCount; i > 0; i--) {\n        // top edge\n        st[stIndex++] = (i - 1) * leftSt;\n        st[stIndex++] = 1;\n      }\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: st,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.bitangents,\n    });\n  }\n\n  return {\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\nfunction extrudedAttributes(attributes, vertexFormat) {\n  if (\n    !vertexFormat.normal &&\n    !vertexFormat.tangent &&\n    !vertexFormat.bitangent &&\n    !vertexFormat.st\n  ) {\n    return attributes;\n  }\n  const positions = attributes.position.values;\n  let topNormals;\n  let topBitangents;\n  if (vertexFormat.normal || vertexFormat.bitangent) {\n    topNormals = attributes.normal.values;\n    topBitangents = attributes.bitangent.values;\n  }\n  const size = attributes.position.values.length / 18;\n  const threeSize = size * 3;\n  const twoSize = size * 2;\n  const sixSize = threeSize * 2;\n  let i;\n  if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\n    const normals = vertexFormat.normal\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    const tangents = vertexFormat.tangent\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    const bitangents = vertexFormat.bitangent\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    let topPosition = cartesian1;\n    let bottomPosition = cartesian2;\n    let previousPosition = cartesian3;\n    let normal = cartesian4;\n    let tangent = cartesian5;\n    let bitangent = cartesian6;\n    let attrIndex = sixSize;\n    for (i = 0; i < threeSize; i += 3) {\n      const attrIndexOffset = attrIndex + sixSize;\n      topPosition = Cartesian3.fromArray(positions, i, topPosition);\n      bottomPosition = Cartesian3.fromArray(\n        positions,\n        i + threeSize,\n        bottomPosition\n      );\n      previousPosition = Cartesian3.fromArray(\n        positions,\n        (i + 3) % threeSize,\n        previousPosition\n      );\n      bottomPosition = Cartesian3.subtract(\n        bottomPosition,\n        topPosition,\n        bottomPosition\n      );\n      previousPosition = Cartesian3.subtract(\n        previousPosition,\n        topPosition,\n        previousPosition\n      );\n      normal = Cartesian3.normalize(\n        Cartesian3.cross(bottomPosition, previousPosition, normal),\n        normal\n      );\n      if (vertexFormat.normal) {\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\n        CorridorGeometryLibrary.addAttribute(\n          normals,\n          normal,\n          attrIndexOffset + 3\n        );\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\n      }\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\n        if (vertexFormat.bitangent) {\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndexOffset\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndexOffset + 3\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndex\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndex + 3\n          );\n        }\n\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.cross(bitangent, normal, tangent),\n            tangent\n          );\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndexOffset\n          );\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndexOffset + 3\n          );\n          CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndex + 3\n          );\n        }\n      }\n      attrIndex += 6;\n    }\n\n    if (vertexFormat.normal) {\n      normals.set(topNormals); //top\n      for (i = 0; i < threeSize; i += 3) {\n        //bottom normals\n        normals[i + threeSize] = -topNormals[i];\n        normals[i + threeSize + 1] = -topNormals[i + 1];\n        normals[i + threeSize + 2] = -topNormals[i + 2];\n      }\n      attributes.normal.values = normals;\n    } else {\n      attributes.normal = undefined;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents.set(topBitangents); //top\n      bitangents.set(topBitangents, threeSize); //bottom\n      attributes.bitangent.values = bitangents;\n    } else {\n      attributes.bitangent = undefined;\n    }\n\n    if (vertexFormat.tangent) {\n      const topTangents = attributes.tangent.values;\n      tangents.set(topTangents); //top\n      tangents.set(topTangents, threeSize); //bottom\n      attributes.tangent.values = tangents;\n    }\n  }\n  if (vertexFormat.st) {\n    const topSt = attributes.st.values;\n    const st = new Float32Array(twoSize * 6);\n    st.set(topSt); //top\n    st.set(topSt, twoSize); //bottom\n    let index = twoSize * 2;\n\n    for (let j = 0; j < 2; j++) {\n      st[index++] = topSt[0];\n      st[index++] = topSt[1];\n      for (i = 2; i < twoSize; i += 2) {\n        const s = topSt[i];\n        const t = topSt[i + 1];\n        st[index++] = s;\n        st[index++] = t;\n        st[index++] = s;\n        st[index++] = t;\n      }\n      st[index++] = topSt[0];\n      st[index++] = topSt[1];\n    }\n    attributes.st.values = st;\n  }\n\n  return attributes;\n}\n\nfunction addWallPositions(positions, index, wallPositions) {\n  wallPositions[index++] = positions[0];\n  wallPositions[index++] = positions[1];\n  wallPositions[index++] = positions[2];\n  for (let i = 3; i < positions.length; i += 3) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const z = positions[i + 2];\n    wallPositions[index++] = x;\n    wallPositions[index++] = y;\n    wallPositions[index++] = z;\n    wallPositions[index++] = x;\n    wallPositions[index++] = y;\n    wallPositions[index++] = z;\n  }\n  wallPositions[index++] = positions[0];\n  wallPositions[index++] = positions[1];\n  wallPositions[index++] = positions[2];\n\n  return wallPositions;\n}\n\nfunction computePositionsExtruded(params, vertexFormat) {\n  const topVertexFormat = new VertexFormat({\n    position: vertexFormat.position,\n    normal:\n      vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume,\n    tangent: vertexFormat.tangent,\n    bitangent: vertexFormat.normal || vertexFormat.bitangent,\n    st: vertexFormat.st,\n  });\n  const ellipsoid = params.ellipsoid;\n  const computedPositions = CorridorGeometryLibrary.computePositions(params);\n  const attr = combine(computedPositions, topVertexFormat, ellipsoid);\n  const height = params.height;\n  const extrudedHeight = params.extrudedHeight;\n  let attributes = attr.attributes;\n  const indices = attr.indices;\n  let positions = attributes.position.values;\n  let length = positions.length;\n  const newPositions = new Float64Array(length * 6);\n  let extrudedPositions = new Float64Array(length);\n  extrudedPositions.set(positions);\n  let wallPositions = new Float64Array(length * 4);\n\n  positions = PolygonPipeline.scaleToGeodeticHeight(\n    positions,\n    height,\n    ellipsoid\n  );\n  wallPositions = addWallPositions(positions, 0, wallPositions);\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\n    extrudedPositions,\n    extrudedHeight,\n    ellipsoid\n  );\n  wallPositions = addWallPositions(\n    extrudedPositions,\n    length * 2,\n    wallPositions\n  );\n  newPositions.set(positions);\n  newPositions.set(extrudedPositions, length);\n  newPositions.set(wallPositions, length * 2);\n  attributes.position.values = newPositions;\n\n  attributes = extrudedAttributes(attributes, vertexFormat);\n  let i;\n  const size = length / 3;\n  if (params.shadowVolume) {\n    const topNormals = attributes.normal.values;\n    length = topNormals.length;\n\n    let extrudeNormals = new Float32Array(length * 6);\n    for (i = 0; i < length; i++) {\n      topNormals[i] = -topNormals[i];\n    }\n    //only get normals for bottom layer that's going to be pushed down\n    extrudeNormals.set(topNormals, length); //bottom face\n    extrudeNormals = addWallPositions(topNormals, length * 4, extrudeNormals); //bottom wall\n    attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n    if (!vertexFormat.normal) {\n      attributes.normal = undefined;\n    }\n  }\n  if (defined(params.offsetAttribute)) {\n    let applyOffset = new Uint8Array(size * 6);\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\n      applyOffset = arrayFill(applyOffset, 1, size * 2, size * 4); // top wall\n    } else {\n      const applyOffsetValue =\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\n    }\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  const iLength = indices.length;\n  const twoSize = size + size;\n  const newIndices = IndexDatatype.createTypedArray(\n    newPositions.length / 3,\n    iLength * 2 + twoSize * 3\n  );\n  newIndices.set(indices);\n  let index = iLength;\n  for (i = 0; i < iLength; i += 3) {\n    // bottom indices\n    const v0 = indices[i];\n    const v1 = indices[i + 1];\n    const v2 = indices[i + 2];\n    newIndices[index++] = v2 + size;\n    newIndices[index++] = v1 + size;\n    newIndices[index++] = v0 + size;\n  }\n\n  let UL, LL, UR, LR;\n\n  for (i = 0; i < twoSize; i += 2) {\n    //wall indices\n    UL = i + twoSize;\n    LL = UL + twoSize;\n    UR = UL + 1;\n    LR = LL + 1;\n    newIndices[index++] = UL;\n    newIndices[index++] = LL;\n    newIndices[index++] = UR;\n    newIndices[index++] = UR;\n    newIndices[index++] = LL;\n    newIndices[index++] = LR;\n  }\n\n  return {\n    attributes: attributes,\n    indices: newIndices,\n  };\n}\n\nconst scratchCartesian1 = new Cartesian3();\nconst scratchCartesian2 = new Cartesian3();\nconst scratchCartographic = new Cartographic();\n\nfunction computeOffsetPoints(\n  position1,\n  position2,\n  ellipsoid,\n  halfWidth,\n  min,\n  max\n) {\n  // Compute direction of offset the point\n  const direction = Cartesian3.subtract(\n    position2,\n    position1,\n    scratchCartesian1\n  );\n  Cartesian3.normalize(direction, direction);\n  const normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\n  const offsetDirection = Cartesian3.cross(\n    direction,\n    normal,\n    scratchCartesian1\n  );\n  Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\n\n  let minLat = min.latitude;\n  let minLon = min.longitude;\n  let maxLat = max.latitude;\n  let maxLon = max.longitude;\n\n  // Compute 2 offset points\n  Cartesian3.add(position1, offsetDirection, scratchCartesian2);\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n  let lat = scratchCartographic.latitude;\n  let lon = scratchCartographic.longitude;\n  minLat = Math.min(minLat, lat);\n  minLon = Math.min(minLon, lon);\n  maxLat = Math.max(maxLat, lat);\n  maxLon = Math.max(maxLon, lon);\n\n  Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n  lat = scratchCartographic.latitude;\n  lon = scratchCartographic.longitude;\n  minLat = Math.min(minLat, lat);\n  minLon = Math.min(minLon, lon);\n  maxLat = Math.max(maxLat, lat);\n  maxLon = Math.max(maxLon, lon);\n\n  min.latitude = minLat;\n  min.longitude = minLon;\n  max.latitude = maxLat;\n  max.longitude = maxLon;\n}\n\nconst scratchCartesianOffset = new Cartesian3();\nconst scratchCartesianEnds = new Cartesian3();\nconst scratchCartographicMin = new Cartographic();\nconst scratchCartographicMax = new Cartographic();\n\nfunction computeRectangle(positions, ellipsoid, width, cornerType, result) {\n  positions = scaleToSurface(positions, ellipsoid);\n  const cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  const length = cleanPositions.length;\n  if (length < 2 || width <= 0) {\n    return new Rectangle();\n  }\n  const halfWidth = width * 0.5;\n\n  scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\n  scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\n  scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\n  scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\n\n  let lat, lon;\n  if (cornerType === CornerType.ROUNDED) {\n    // Compute start cap\n    const first = cleanPositions[0];\n    Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\n    Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n    Cartesian3.multiplyByScalar(\n      scratchCartesianOffset,\n      halfWidth,\n      scratchCartesianOffset\n    );\n    Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\n\n    ellipsoid.cartesianToCartographic(\n      scratchCartesianEnds,\n      scratchCartographic\n    );\n    lat = scratchCartographic.latitude;\n    lon = scratchCartographic.longitude;\n    scratchCartographicMin.latitude = Math.min(\n      scratchCartographicMin.latitude,\n      lat\n    );\n    scratchCartographicMin.longitude = Math.min(\n      scratchCartographicMin.longitude,\n      lon\n    );\n    scratchCartographicMax.latitude = Math.max(\n      scratchCartographicMax.latitude,\n      lat\n    );\n    scratchCartographicMax.longitude = Math.max(\n      scratchCartographicMax.longitude,\n      lon\n    );\n  }\n\n  // Compute the rest\n  for (let i = 0; i < length - 1; ++i) {\n    computeOffsetPoints(\n      cleanPositions[i],\n      cleanPositions[i + 1],\n      ellipsoid,\n      halfWidth,\n      scratchCartographicMin,\n      scratchCartographicMax\n    );\n  }\n\n  // Compute ending point\n  const last = cleanPositions[length - 1];\n  Cartesian3.subtract(last, cleanPositions[length - 2], scratchCartesianOffset);\n  Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n  Cartesian3.multiplyByScalar(\n    scratchCartesianOffset,\n    halfWidth,\n    scratchCartesianOffset\n  );\n  Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\n  computeOffsetPoints(\n    last,\n    scratchCartesianEnds,\n    ellipsoid,\n    halfWidth,\n    scratchCartographicMin,\n    scratchCartographicMax\n  );\n\n  if (cornerType === CornerType.ROUNDED) {\n    // Compute end cap\n    ellipsoid.cartesianToCartographic(\n      scratchCartesianEnds,\n      scratchCartographic\n    );\n    lat = scratchCartographic.latitude;\n    lon = scratchCartographic.longitude;\n    scratchCartographicMin.latitude = Math.min(\n      scratchCartographicMin.latitude,\n      lat\n    );\n    scratchCartographicMin.longitude = Math.min(\n      scratchCartographicMin.longitude,\n      lon\n    );\n    scratchCartographicMax.latitude = Math.max(\n      scratchCartographicMax.latitude,\n      lat\n    );\n    scratchCartographicMax.longitude = Math.max(\n      scratchCartographicMax.longitude,\n      lon\n    );\n  }\n\n  const rectangle = defined(result) ? result : new Rectangle();\n  rectangle.north = scratchCartographicMax.latitude;\n  rectangle.south = scratchCartographicMin.latitude;\n  rectangle.east = scratchCartographicMax.longitude;\n  rectangle.west = scratchCartographicMin.longitude;\n\n  return rectangle;\n}\n\n/**\n * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CorridorGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n * @param {Number} options.width The distance between the edges of the corridor in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see CorridorGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n *\n * @example\n * const corridor = new Cesium.CorridorGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n *   width : 100000\n * });\n */\nfunction CorridorGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.positions;\n  const width = options.width;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", positions);\n  Check.defined(\"options.width\", width);\n  //>>includeEnd('debug');\n\n  const height = defaultValue(options.height, 0.0);\n  const extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  this._positions = positions;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._width = width;\n  this._height = Math.max(height, extrudedHeight);\n  this._extrudedHeight = Math.min(height, extrudedHeight);\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createCorridorGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._rectangle = undefined;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    1 +\n    positions.length * Cartesian3.packedLength +\n    Ellipsoid.packedLength +\n    VertexFormat.packedLength +\n    7;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CorridorGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCorridorGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const positions = value._positions;\n  const length = positions.length;\n  array[startingIndex++] = length;\n\n  for (let i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._width;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  positions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  width: undefined,\n  height: undefined,\n  extrudedHeight: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n  shadowVolume: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CorridorGeometry} [result] The object into which to store the result.\n * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\n */\nCorridorGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const length = array[startingIndex++];\n  const positions = new Array(length);\n\n  for (let i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const width = array[startingIndex++];\n  const height = array[startingIndex++];\n  const extrudedHeight = array[startingIndex++];\n  const cornerType = array[startingIndex++];\n  const granularity = array[startingIndex++];\n  const shadowVolume = array[startingIndex++] === 1.0;\n  const offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.width = width;\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    scratchOptions.shadowVolume = shadowVolume;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new CorridorGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._width = width;\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n * @param {Number} options.width The distance between the edges of the corridor in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle.\n */\nCorridorGeometry.computeRectangle = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.positions;\n  const width = options.width;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", positions);\n  Check.defined(\"options.width\", width);\n  //>>includeEnd('debug');\n\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  const cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n\n  return computeRectangle(positions, ellipsoid, width, cornerType, result);\n};\n\n/**\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n *\n * @param {CorridorGeometry} corridorGeometry A description of the corridor.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCorridorGeometry.createGeometry = function (corridorGeometry) {\n  let positions = corridorGeometry._positions;\n  const width = corridorGeometry._width;\n  const ellipsoid = corridorGeometry._ellipsoid;\n\n  positions = scaleToSurface(positions, ellipsoid);\n  const cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n\n  if (cleanPositions.length < 2 || width <= 0) {\n    return;\n  }\n\n  const height = corridorGeometry._height;\n  const extrudedHeight = corridorGeometry._extrudedHeight;\n  const extrude = !CesiumMath.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    CesiumMath.EPSILON2\n  );\n\n  const vertexFormat = corridorGeometry._vertexFormat;\n  const params = {\n    ellipsoid: ellipsoid,\n    positions: cleanPositions,\n    width: width,\n    cornerType: corridorGeometry._cornerType,\n    granularity: corridorGeometry._granularity,\n    saveAttributes: true,\n  };\n  let attr;\n  if (extrude) {\n    params.height = height;\n    params.extrudedHeight = extrudedHeight;\n    params.shadowVolume = corridorGeometry._shadowVolume;\n    params.offsetAttribute = corridorGeometry._offsetAttribute;\n    attr = computePositionsExtruded(params, vertexFormat);\n  } else {\n    const computedPositions = CorridorGeometryLibrary.computePositions(params);\n    attr = combine(computedPositions, vertexFormat, ellipsoid);\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n      attr.attributes.position.values,\n      height,\n      ellipsoid\n    );\n\n    if (defined(corridorGeometry._offsetAttribute)) {\n      const applyOffsetValue =\n        corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n          ? 0\n          : 1;\n      const length = attr.attributes.position.values.length;\n      const applyOffset = new Uint8Array(length / 3);\n      arrayFill(applyOffset, applyOffsetValue);\n      attr.attributes.applyOffset = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n  const attributes = attr.attributes;\n  const boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values,\n    undefined,\n    3\n  );\n  if (!vertexFormat.position) {\n    attr.attributes.position.values = undefined;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: attr.indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: boundingSphere,\n    offsetAttribute: corridorGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nCorridorGeometry.createShadowVolume = function (\n  corridorGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = corridorGeometry._granularity;\n  const ellipsoid = corridorGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CorridorGeometry({\n    positions: corridorGeometry._positions,\n    width: corridorGeometry._width,\n    cornerType: corridorGeometry._cornerType,\n    ellipsoid: ellipsoid,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CorridorGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        this._rectangle = computeRectangle(\n          this._positions,\n          this._ellipsoid,\n          this._width,\n          this._cornerType\n        );\n      }\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\n   *\n   * Corridors don't support stRotation,\n   * so just return the corners of the original system.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return [0, 0, 0, 1, 1, 0];\n    },\n  },\n});\nexport default CorridorGeometry;\n","import CorridorGeometry from \"../Core/CorridorGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\n\nfunction createCorridorGeometry(corridorGeometry, offset) {\n  if (defined(offset)) {\n    corridorGeometry = CorridorGeometry.unpack(corridorGeometry, offset);\n  }\n  corridorGeometry._ellipsoid = Ellipsoid.clone(corridorGeometry._ellipsoid);\n  return CorridorGeometry.createGeometry(corridorGeometry);\n}\nexport default createCorridorGeometry;\n"],"names":["cartesian1","Cartesian3","cartesian2","cartesian3","cartesian4","cartesian5","cartesian6","scratch1","scratch2","scaleToSurface","positions","ellipsoid","i","length","scaleToGeodeticSurface","addNormals","attr","normal","left","front","back","vertexFormat","normals","tangents","bitangents","forward","normalize","cross","CorridorGeometryLibrary","addAttribute","tangent","bitangent","combine","computedPositions","corners","endPositions","computedLefts","lefts","computedNormals","attributes","GeometryAttributes","corner","leftCount","rightCount","indicesLength","leftSide","leftPositions","defined","rightPositions","addEndPositions","endPositionLength","size","finalPositions","Float64Array","Float32Array","undefined","UL","LL","UR","LR","rightPos","leftPos","halfLength","indices","IndexDatatype","createTypedArray","index","firstEndPositions","fromArray","rightNormal","leftNormal","posIndex","compIndex","rightEdge","leftEdge","set","geodeticSurfaceNormal","add","j","l","r","pivot","start","outsidePoint","previousPoint","nextPoint","subtract","negate","splice","lastEndPositions","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","st","rightSt","leftSt","stIndex","theta","Math","PI","a","halfEndPos","CesiumMath","PI_OVER_TWO","cos","sin","FLOAT","addWallPositions","wallPositions","x","y","z","computePositionsExtruded","params","topVertexFormat","VertexFormat","shadowVolume","computePositions","height","extrudedHeight","newPositions","extrudedPositions","PolygonPipeline","scaleToGeodeticHeight","topNormals","topBitangents","threeSize","twoSize","sixSize","topPosition","bottomPosition","previousPosition","attrIndex","attrIndexOffset","topTangents","topSt","s","t","extrudedAttributes","extrudeNormals","extrudeDirection","offsetAttribute","applyOffset","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","applyOffsetValue","NONE","UNSIGNED_BYTE","iLength","newIndices","v0","v1","v2","scratchCartesian1","scratchCartesian2","scratchCartographic","Cartographic","computeOffsetPoints","position1","position2","halfWidth","min","max","direction","offsetDirection","multiplyByScalar","minLat","latitude","minLon","longitude","maxLat","maxLon","cartesianToCartographic","lat","lon","scratchCartesianOffset","scratchCartesianEnds","scratchCartographicMin","scratchCartographicMax","computeRectangle","width","cornerType","result","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","Rectangle","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","CornerType","ROUNDED","first","last","rectangle","north","south","east","west","CorridorGeometry","options","defaultValue","EMPTY_OBJECT","Check","this","_positions","_ellipsoid","Ellipsoid","clone","WGS84","_vertexFormat","DEFAULT","_width","_height","_extrudedHeight","_cornerType","_granularity","granularity","RADIANS_PER_DEGREE","_shadowVolume","_workerName","_offsetAttribute","_rectangle","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","Array","createGeometry","corridorGeometry","extrude","EPSILON2","saveAttributes","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","TRIANGLES","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","get","textureCoordinateRotationPoints","offset"],"mappings":"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"}