{"version":3,"file":"createVectorTilePolylines.js","sources":["../../../../Source/Core/decodeVectorPolylinePositions.js","../../../../Source/WorkersES6/createVectorTilePolylines.js"],"sourcesContent":["import AttributeCompression from \"./AttributeCompression.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport CesiumMath from \"./Math.js\";\n\nconst maxShort = 32767;\n\nconst scratchBVCartographic = new Cartographic();\nconst scratchEncodedPosition = new Cartesian3();\n\nfunction decodeVectorPolylinePositions(\n  positions,\n  rectangle,\n  minimumHeight,\n  maximumHeight,\n  ellipsoid\n) {\n  const positionsLength = positions.length / 3;\n  const uBuffer = positions.subarray(0, positionsLength);\n  const vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n  const heightBuffer = positions.subarray(\n    2 * positionsLength,\n    3 * positionsLength\n  );\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n\n  const decoded = new Float64Array(positions.length);\n  for (let i = 0; i < positionsLength; ++i) {\n    const u = uBuffer[i];\n    const v = vBuffer[i];\n    const h = heightBuffer[i];\n\n    const lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n    const lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n    const alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\n\n    const cartographic = Cartographic.fromRadians(\n      lon,\n      lat,\n      alt,\n      scratchBVCartographic\n    );\n    const decodedPosition = ellipsoid.cartographicToCartesian(\n      cartographic,\n      scratchEncodedPosition\n    );\n    Cartesian3.pack(decodedPosition, decoded, i * 3);\n  }\n  return decoded;\n}\nexport default decodeVectorPolylinePositions;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport combine from \"../Core/combine.js\";\nimport decodeVectorPolylinePositions from \"../Core/decodeVectorPolylinePositions.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\n\nconst scratchRectangle = new Rectangle();\nconst scratchEllipsoid = new Ellipsoid();\nconst scratchCenter = new Cartesian3();\nconst scratchMinMaxHeights = {\n  min: undefined,\n  max: undefined,\n};\n\nfunction unpackBuffer(packedBuffer) {\n  packedBuffer = new Float64Array(packedBuffer);\n\n  let offset = 0;\n  scratchMinMaxHeights.min = packedBuffer[offset++];\n  scratchMinMaxHeights.max = packedBuffer[offset++];\n\n  Rectangle.unpack(packedBuffer, offset, scratchRectangle);\n  offset += Rectangle.packedLength;\n\n  Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\n  offset += Ellipsoid.packedLength;\n\n  Cartesian3.unpack(packedBuffer, offset, scratchCenter);\n}\n\nfunction getPositionOffsets(counts) {\n  const countsLength = counts.length;\n  const positionOffsets = new Uint32Array(countsLength + 1);\n  let offset = 0;\n  for (let i = 0; i < countsLength; ++i) {\n    positionOffsets[i] = offset;\n    offset += counts[i];\n  }\n  positionOffsets[countsLength] = offset;\n  return positionOffsets;\n}\n\nconst scratchP0 = new Cartesian3();\nconst scratchP1 = new Cartesian3();\nconst scratchPrev = new Cartesian3();\nconst scratchCur = new Cartesian3();\nconst scratchNext = new Cartesian3();\n\nfunction createVectorTilePolylines(parameters, transferableObjects) {\n  const encodedPositions = new Uint16Array(parameters.positions);\n  const widths = new Uint16Array(parameters.widths);\n  const counts = new Uint32Array(parameters.counts);\n  const batchIds = new Uint16Array(parameters.batchIds);\n\n  unpackBuffer(parameters.packedBuffer);\n  const rectangle = scratchRectangle;\n  const ellipsoid = scratchEllipsoid;\n  const center = scratchCenter;\n  const minimumHeight = scratchMinMaxHeights.min;\n  const maximumHeight = scratchMinMaxHeights.max;\n\n  const positions = decodeVectorPolylinePositions(\n    encodedPositions,\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    ellipsoid\n  );\n\n  const positionsLength = positions.length / 3;\n  const size = positionsLength * 4 - 4;\n\n  const curPositions = new Float32Array(size * 3);\n  const prevPositions = new Float32Array(size * 3);\n  const nextPositions = new Float32Array(size * 3);\n  const expandAndWidth = new Float32Array(size * 2);\n  const vertexBatchIds = new Uint16Array(size);\n\n  let positionIndex = 0;\n  let expandAndWidthIndex = 0;\n  let batchIdIndex = 0;\n\n  let i;\n  let offset = 0;\n  let length = counts.length;\n\n  for (i = 0; i < length; ++i) {\n    const count = counts[i];\n    const width = widths[i];\n    const batchId = batchIds[i];\n\n    for (let j = 0; j < count; ++j) {\n      let previous;\n      if (j === 0) {\n        const p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\n        const p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\n\n        previous = Cartesian3.subtract(p0, p1, scratchPrev);\n        Cartesian3.add(p0, previous, previous);\n      } else {\n        previous = Cartesian3.unpack(\n          positions,\n          (offset + j - 1) * 3,\n          scratchPrev\n        );\n      }\n\n      const current = Cartesian3.unpack(\n        positions,\n        (offset + j) * 3,\n        scratchCur\n      );\n\n      let next;\n      if (j === count - 1) {\n        const p2 = Cartesian3.unpack(\n          positions,\n          (offset + count - 1) * 3,\n          scratchP0\n        );\n        const p3 = Cartesian3.unpack(\n          positions,\n          (offset + count - 2) * 3,\n          scratchP1\n        );\n\n        next = Cartesian3.subtract(p2, p3, scratchNext);\n        Cartesian3.add(p2, next, next);\n      } else {\n        next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\n      }\n\n      Cartesian3.subtract(previous, center, previous);\n      Cartesian3.subtract(current, center, current);\n      Cartesian3.subtract(next, center, next);\n\n      const startK = j === 0 ? 2 : 0;\n      const endK = j === count - 1 ? 2 : 4;\n\n      for (let k = startK; k < endK; ++k) {\n        Cartesian3.pack(current, curPositions, positionIndex);\n        Cartesian3.pack(previous, prevPositions, positionIndex);\n        Cartesian3.pack(next, nextPositions, positionIndex);\n        positionIndex += 3;\n\n        const direction = k - 2 < 0 ? -1.0 : 1.0;\n        expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\n        expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n        vertexBatchIds[batchIdIndex++] = batchId;\n      }\n    }\n\n    offset += count;\n  }\n\n  const indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n  let index = 0;\n  let indicesIndex = 0;\n  length = positionsLength - 1;\n  for (i = 0; i < length; ++i) {\n    indices[indicesIndex++] = index;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 1;\n\n    indices[indicesIndex++] = index + 1;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 3;\n\n    index += 4;\n  }\n\n  transferableObjects.push(\n    curPositions.buffer,\n    prevPositions.buffer,\n    nextPositions.buffer\n  );\n  transferableObjects.push(\n    expandAndWidth.buffer,\n    vertexBatchIds.buffer,\n    indices.buffer\n  );\n\n  let results = {\n    indexDatatype:\n      indices.BYTES_PER_ELEMENT === 2\n        ? IndexDatatype.UNSIGNED_SHORT\n        : IndexDatatype.UNSIGNED_INT,\n    currentPositions: curPositions.buffer,\n    previousPositions: prevPositions.buffer,\n    nextPositions: nextPositions.buffer,\n    expandAndWidth: expandAndWidth.buffer,\n    batchIds: vertexBatchIds.buffer,\n    indices: indices.buffer,\n  };\n\n  if (parameters.keepDecodedPositions) {\n    const positionOffsets = getPositionOffsets(counts);\n    transferableObjects.push(positions.buffer, positionOffsets.buffer);\n    results = combine(results, {\n      decodedPositions: positions.buffer,\n      decodedPositionOffsets: positionOffsets.buffer,\n    });\n  }\n\n  return results;\n}\nexport default createTaskProcessorWorker(createVectorTilePolylines);\n"],"names":["maxShort","scratchBVCartographic","Cartographic","scratchEncodedPosition","Cartesian3","scratchRectangle","Rectangle","scratchEllipsoid","Ellipsoid","scratchCenter","scratchMinMaxHeights","min","undefined","max","scratchP0","scratchP1","scratchPrev","scratchCur","scratchNext","createTaskProcessorWorker","parameters","transferableObjects","encodedPositions","Uint16Array","positions","widths","counts","Uint32Array","batchIds","packedBuffer","Float64Array","offset","unpack","packedLength","unpackBuffer","ellipsoid","center","rectangle","minimumHeight","maximumHeight","positionsLength","length","uBuffer","subarray","vBuffer","heightBuffer","AttributeCompression","zigZagDeltaDecode","decoded","i","u","v","h","lon","CesiumMath","lerp","west","east","lat","south","north","alt","cartographic","fromRadians","decodedPosition","cartographicToCartesian","pack","decodeVectorPolylinePositions","size","curPositions","Float32Array","prevPositions","nextPositions","expandAndWidth","vertexBatchIds","positionIndex","expandAndWidthIndex","batchIdIndex","count","width","batchId","j","previous","p0","p1","subtract","add","current","next","p2","p3","endK","k","direction","indices","IndexDatatype","createTypedArray","index","indicesIndex","push","buffer","results","indexDatatype","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","currentPositions","previousPositions","keepDecodedPositions","positionOffsets","countsLength","getPositionOffsets","combine","decodedPositions","decodedPositionOffsets"],"mappings":"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"}