{"version":3,"file":"createPolygonGeometry.js","sources":["../../../../Source/Core/PolygonGeometry.js","../../../../Source/WorkersES6/createPolygonGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\nimport arrayFill from \"./arrayFill.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nconst scratchCarto1 = new Cartographic();\nconst scratchCarto2 = new Cartographic();\nfunction adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n  const carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n  const height = carto1.height;\n  const p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n  p1Carto.height = height;\n  ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n  const p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n  p2Carto.height = height - 100;\n  ellipsoid.cartographicToCartesian(p2Carto, p2);\n}\n\nconst scratchBoundingRectangle = new BoundingRectangle();\nconst scratchPosition = new Cartesian3();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst p1Scratch = new Cartesian3();\nconst p2Scratch = new Cartesian3();\nlet scratchPerPosNormal = new Cartesian3();\nlet scratchPerPosTangent = new Cartesian3();\nlet scratchPerPosBitangent = new Cartesian3();\n\nconst appendTextureCoordinatesOrigin = new Cartesian2();\nconst appendTextureCoordinatesCartesian2 = new Cartesian2();\nconst appendTextureCoordinatesCartesian3 = new Cartesian3();\nconst appendTextureCoordinatesQuaternion = new Quaternion();\nconst appendTextureCoordinatesMatrix3 = new Matrix3();\nconst tangentMatrixScratch = new Matrix3();\n\nfunction computeAttributes(options) {\n  const vertexFormat = options.vertexFormat;\n  const geometry = options.geometry;\n  const shadowVolume = options.shadowVolume;\n  const flatPositions = geometry.attributes.position.values;\n  let length = flatPositions.length;\n  const wall = options.wall;\n  const top = options.top || wall;\n  const bottom = options.bottom || wall;\n  if (\n    vertexFormat.st ||\n    vertexFormat.normal ||\n    vertexFormat.tangent ||\n    vertexFormat.bitangent ||\n    shadowVolume\n  ) {\n    // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n    // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n    const boundingRectangle = options.boundingRectangle;\n    const tangentPlane = options.tangentPlane;\n    const ellipsoid = options.ellipsoid;\n    const stRotation = options.stRotation;\n    const perPositionHeight = options.perPositionHeight;\n\n    const origin = appendTextureCoordinatesOrigin;\n    origin.x = boundingRectangle.x;\n    origin.y = boundingRectangle.y;\n\n    const textureCoordinates = vertexFormat.st\n      ? new Float32Array(2 * (length / 3))\n      : undefined;\n    let normals;\n    if (vertexFormat.normal) {\n      if (perPositionHeight && top && !wall) {\n        normals = geometry.attributes.normal.values;\n      } else {\n        normals = new Float32Array(length);\n      }\n    }\n    const tangents = vertexFormat.tangent\n      ? new Float32Array(length)\n      : undefined;\n    const bitangents = vertexFormat.bitangent\n      ? new Float32Array(length)\n      : undefined;\n    const extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\n\n    let textureCoordIndex = 0;\n    let attrIndex = 0;\n\n    let normal = scratchNormal;\n    let tangent = scratchTangent;\n    let bitangent = scratchBitangent;\n    let recomputeNormal = true;\n\n    let textureMatrix = appendTextureCoordinatesMatrix3;\n    let tangentRotationMatrix = tangentMatrixScratch;\n    if (stRotation !== 0.0) {\n      let rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n      rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        -stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      tangentRotationMatrix = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationMatrix\n      );\n    } else {\n      textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n      tangentRotationMatrix = Matrix3.clone(\n        Matrix3.IDENTITY,\n        tangentRotationMatrix\n      );\n    }\n\n    let bottomOffset = 0;\n    let bottomOffset2 = 0;\n\n    if (top && bottom) {\n      bottomOffset = length / 2;\n      bottomOffset2 = length / 3;\n\n      length /= 2;\n    }\n\n    for (let i = 0; i < length; i += 3) {\n      const position = Cartesian3.fromArray(\n        flatPositions,\n        i,\n        appendTextureCoordinatesCartesian3\n      );\n\n      if (vertexFormat.st) {\n        let p = Matrix3.multiplyByVector(\n          textureMatrix,\n          position,\n          scratchPosition\n        );\n        p = ellipsoid.scaleToGeodeticSurface(p, p);\n        const st = tangentPlane.projectPointOntoPlane(\n          p,\n          appendTextureCoordinatesCartesian2\n        );\n        Cartesian2.subtract(st, origin, st);\n\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n        if (bottom) {\n          textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\n          textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\n        }\n        if (top) {\n          textureCoordinates[textureCoordIndex] = stx;\n          textureCoordinates[textureCoordIndex + 1] = sty;\n        }\n\n        textureCoordIndex += 2;\n      }\n\n      if (\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent ||\n        shadowVolume\n      ) {\n        const attrIndex1 = attrIndex + 1;\n        const attrIndex2 = attrIndex + 2;\n\n        if (wall) {\n          if (i + 3 < length) {\n            const p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\n\n            if (recomputeNormal) {\n              const p2 = Cartesian3.fromArray(\n                flatPositions,\n                i + length,\n                p2Scratch\n              );\n              if (perPositionHeight) {\n                adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\n              }\n              Cartesian3.subtract(p1, position, p1);\n              Cartesian3.subtract(p2, position, p2);\n              normal = Cartesian3.normalize(\n                Cartesian3.cross(p2, p1, normal),\n                normal\n              );\n              recomputeNormal = false;\n            }\n\n            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) {\n              // if we've reached a corner\n              recomputeNormal = true;\n            }\n          }\n\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\n            if (vertexFormat.tangent) {\n              tangent = Cartesian3.normalize(\n                Cartesian3.cross(bitangent, normal, tangent),\n                tangent\n              );\n            }\n          }\n        } else {\n          normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            if (perPositionHeight) {\n              scratchPerPosNormal = Cartesian3.fromArray(\n                normals,\n                attrIndex,\n                scratchPerPosNormal\n              );\n              scratchPerPosTangent = Cartesian3.cross(\n                Cartesian3.UNIT_Z,\n                scratchPerPosNormal,\n                scratchPerPosTangent\n              );\n              scratchPerPosTangent = Cartesian3.normalize(\n                Matrix3.multiplyByVector(\n                  tangentRotationMatrix,\n                  scratchPerPosTangent,\n                  scratchPerPosTangent\n                ),\n                scratchPerPosTangent\n              );\n              if (vertexFormat.bitangent) {\n                scratchPerPosBitangent = Cartesian3.normalize(\n                  Cartesian3.cross(\n                    scratchPerPosNormal,\n                    scratchPerPosTangent,\n                    scratchPerPosBitangent\n                  ),\n                  scratchPerPosBitangent\n                );\n              }\n            }\n\n            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n            tangent = Cartesian3.normalize(\n              Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent),\n              tangent\n            );\n            if (vertexFormat.bitangent) {\n              bitangent = Cartesian3.normalize(\n                Cartesian3.cross(normal, tangent, bitangent),\n                bitangent\n              );\n            }\n          }\n        }\n\n        if (vertexFormat.normal) {\n          if (options.wall) {\n            normals[attrIndex + bottomOffset] = normal.x;\n            normals[attrIndex1 + bottomOffset] = normal.y;\n            normals[attrIndex2 + bottomOffset] = normal.z;\n          } else if (bottom) {\n            normals[attrIndex + bottomOffset] = -normal.x;\n            normals[attrIndex1 + bottomOffset] = -normal.y;\n            normals[attrIndex2 + bottomOffset] = -normal.z;\n          }\n\n          if ((top && !perPositionHeight) || wall) {\n            normals[attrIndex] = normal.x;\n            normals[attrIndex1] = normal.y;\n            normals[attrIndex2] = normal.z;\n          }\n        }\n\n        if (shadowVolume) {\n          if (wall) {\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          }\n          extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n          extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n          extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n        }\n\n        if (vertexFormat.tangent) {\n          if (options.wall) {\n            tangents[attrIndex + bottomOffset] = tangent.x;\n            tangents[attrIndex1 + bottomOffset] = tangent.y;\n            tangents[attrIndex2 + bottomOffset] = tangent.z;\n          } else if (bottom) {\n            tangents[attrIndex + bottomOffset] = -tangent.x;\n            tangents[attrIndex1 + bottomOffset] = -tangent.y;\n            tangents[attrIndex2 + bottomOffset] = -tangent.z;\n          }\n\n          if (top) {\n            if (perPositionHeight) {\n              tangents[attrIndex] = scratchPerPosTangent.x;\n              tangents[attrIndex1] = scratchPerPosTangent.y;\n              tangents[attrIndex2] = scratchPerPosTangent.z;\n            } else {\n              tangents[attrIndex] = tangent.x;\n              tangents[attrIndex1] = tangent.y;\n              tangents[attrIndex2] = tangent.z;\n            }\n          }\n        }\n\n        if (vertexFormat.bitangent) {\n          if (bottom) {\n            bitangents[attrIndex + bottomOffset] = bitangent.x;\n            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n          }\n          if (top) {\n            if (perPositionHeight) {\n              bitangents[attrIndex] = scratchPerPosBitangent.x;\n              bitangents[attrIndex1] = scratchPerPosBitangent.y;\n              bitangents[attrIndex2] = scratchPerPosBitangent.z;\n            } else {\n              bitangents[attrIndex] = bitangent.x;\n              bitangents[attrIndex1] = bitangent.y;\n              bitangents[attrIndex2] = bitangent.z;\n            }\n          }\n        }\n        attrIndex += 3;\n      }\n    }\n\n    if (vertexFormat.st) {\n      geometry.attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: textureCoordinates,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      geometry.attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      geometry.attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      geometry.attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    if (shadowVolume) {\n      geometry.attributes.extrudeDirection = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: extrudeNormals,\n      });\n    }\n  }\n\n  if (options.extrude && defined(options.offsetAttribute)) {\n    const size = flatPositions.length / 3;\n    let offsetAttribute = new Uint8Array(size);\n\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      if ((top && bottom) || wall) {\n        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n      } else if (top) {\n        offsetAttribute = arrayFill(offsetAttribute, 1);\n      }\n    } else {\n      const offsetValue =\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n    }\n\n    geometry.attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return geometry;\n}\n\nconst startCartographicScratch = new Cartographic();\nconst endCartographicScratch = new Cartographic();\nconst idlCross = {\n  westOverIDL: 0.0,\n  eastOverIDL: 0.0,\n};\nlet ellipsoidGeodesic = new EllipsoidGeodesic();\nfunction computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n  result = defaultValue(result, new Rectangle());\n  if (!defined(positions) || positions.length < 3) {\n    result.west = 0.0;\n    result.north = 0.0;\n    result.south = 0.0;\n    result.east = 0.0;\n    return result;\n  }\n\n  if (arcType === ArcType.RHUMB) {\n    return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n  }\n\n  if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n    ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n  }\n\n  result.west = Number.POSITIVE_INFINITY;\n  result.east = Number.NEGATIVE_INFINITY;\n  result.south = Number.POSITIVE_INFINITY;\n  result.north = Number.NEGATIVE_INFINITY;\n\n  idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n  idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n  const inverseChordLength =\n    1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n  const positionsLength = positions.length;\n  let endCartographic = ellipsoid.cartesianToCartographic(\n    positions[0],\n    endCartographicScratch\n  );\n  let startCartographic = startCartographicScratch;\n  let swap;\n\n  for (let i = 1; i < positionsLength; i++) {\n    swap = startCartographic;\n    startCartographic = endCartographic;\n    endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n    ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n    interpolateAndGrowRectangle(\n      ellipsoidGeodesic,\n      inverseChordLength,\n      result,\n      idlCross\n    );\n  }\n\n  swap = startCartographic;\n  startCartographic = endCartographic;\n  endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n  ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n  interpolateAndGrowRectangle(\n    ellipsoidGeodesic,\n    inverseChordLength,\n    result,\n    idlCross\n  );\n\n  if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\n    result.west = idlCross.westOverIDL;\n    result.east = idlCross.eastOverIDL;\n\n    if (result.east > CesiumMath.PI) {\n      result.east = result.east - CesiumMath.TWO_PI;\n    }\n    if (result.west > CesiumMath.PI) {\n      result.west = result.west - CesiumMath.TWO_PI;\n    }\n  }\n\n  return result;\n}\n\nconst interpolatedCartographicScratch = new Cartographic();\nfunction interpolateAndGrowRectangle(\n  ellipsoidGeodesic,\n  inverseChordLength,\n  result,\n  idlCross\n) {\n  const segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n  const numPoints = Math.ceil(segmentLength * inverseChordLength);\n  const subsegmentDistance =\n    numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\n  let interpolationDistance = 0.0;\n\n  for (let i = 0; i < numPoints; i++) {\n    const interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\n      interpolationDistance,\n      interpolatedCartographicScratch\n    );\n    interpolationDistance += subsegmentDistance;\n    const longitude = interpolatedCartographic.longitude;\n    const latitude = interpolatedCartographic.latitude;\n\n    result.west = Math.min(result.west, longitude);\n    result.east = Math.max(result.east, longitude);\n    result.south = Math.min(result.south, latitude);\n    result.north = Math.max(result.north, latitude);\n\n    const lonAdjusted =\n      longitude >= 0 ? longitude : longitude + CesiumMath.TWO_PI;\n    idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n    idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n  }\n}\n\nconst createGeometryFromPositionsExtrudedPositions = [];\n\nfunction createGeometryFromPositionsExtruded(\n  ellipsoid,\n  polygon,\n  granularity,\n  hierarchy,\n  perPositionHeight,\n  closeTop,\n  closeBottom,\n  vertexFormat,\n  arcType\n) {\n  const geos = {\n    walls: [],\n  };\n  let i;\n\n  if (closeTop || closeBottom) {\n    const topGeo = PolygonGeometryLibrary.createGeometryFromPositions(\n      ellipsoid,\n      polygon,\n      granularity,\n      perPositionHeight,\n      vertexFormat,\n      arcType\n    );\n\n    const edgePoints = topGeo.attributes.position.values;\n    const indices = topGeo.indices;\n    let numPositions;\n    let newIndices;\n\n    if (closeTop && closeBottom) {\n      const topBottomPositions = edgePoints.concat(edgePoints);\n\n      numPositions = topBottomPositions.length / 3;\n\n      newIndices = IndexDatatype.createTypedArray(\n        numPositions,\n        indices.length * 2\n      );\n      newIndices.set(indices);\n      const ilength = indices.length;\n\n      const length = numPositions / 2;\n\n      for (i = 0; i < ilength; i += 3) {\n        const i0 = newIndices[i] + length;\n        const i1 = newIndices[i + 1] + length;\n        const i2 = newIndices[i + 2] + length;\n\n        newIndices[i + ilength] = i2;\n        newIndices[i + 1 + ilength] = i1;\n        newIndices[i + 2 + ilength] = i0;\n      }\n\n      topGeo.attributes.position.values = topBottomPositions;\n      if (perPositionHeight && vertexFormat.normal) {\n        const normals = topGeo.attributes.normal.values;\n        topGeo.attributes.normal.values = new Float32Array(\n          topBottomPositions.length\n        );\n        topGeo.attributes.normal.values.set(normals);\n      }\n      topGeo.indices = newIndices;\n    } else if (closeBottom) {\n      numPositions = edgePoints.length / 3;\n      newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\n\n      for (i = 0; i < indices.length; i += 3) {\n        newIndices[i] = indices[i + 2];\n        newIndices[i + 1] = indices[i + 1];\n        newIndices[i + 2] = indices[i];\n      }\n\n      topGeo.indices = newIndices;\n    }\n\n    geos.topAndBottom = new GeometryInstance({\n      geometry: topGeo,\n    });\n  }\n\n  let outerRing = hierarchy.outerRing;\n  let tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n  let positions2D = tangentPlane.projectPointsOntoPlane(\n    outerRing,\n    createGeometryFromPositionsExtrudedPositions\n  );\n\n  let windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n  if (windingOrder === WindingOrder.CLOCKWISE) {\n    outerRing = outerRing.slice().reverse();\n  }\n\n  let wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n    outerRing,\n    ellipsoid,\n    granularity,\n    perPositionHeight,\n    arcType\n  );\n  geos.walls.push(\n    new GeometryInstance({\n      geometry: wallGeo,\n    })\n  );\n\n  const holes = hierarchy.holes;\n  for (i = 0; i < holes.length; i++) {\n    let hole = holes[i];\n\n    tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n    positions2D = tangentPlane.projectPointsOntoPlane(\n      hole,\n      createGeometryFromPositionsExtrudedPositions\n    );\n\n    windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n    if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n      hole = hole.slice().reverse();\n    }\n\n    wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n      hole,\n      ellipsoid,\n      granularity,\n      perPositionHeight,\n      arcType\n    );\n    geos.walls.push(\n      new GeometryInstance({\n        geometry: wallGeo,\n      })\n    );\n  }\n\n  return geos;\n}\n\n/**\n * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias PolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n *\n * @see PolygonGeometry#createGeometry\n * @see PolygonGeometry#fromPositions\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n *\n * @example\n * // 1. create a polygon from points\n * const polygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * // 2. create a nested polygon with holes\n * const polygonWithHole = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -109.0, 30.0,\n *       -95.0, 30.0,\n *       -95.0, 40.0,\n *       -109.0, 40.0\n *     ]),\n *     [new Cesium.PolygonHierarchy(\n *       Cesium.Cartesian3.fromDegreesArray([\n *         -107.0, 31.0,\n *         -107.0, 39.0,\n *         -97.0, 39.0,\n *         -97.0, 31.0\n *       ]),\n *       [new Cesium.PolygonHierarchy(\n *         Cesium.Cartesian3.fromDegreesArray([\n *           -105.0, 33.0,\n *           -99.0, 33.0,\n *           -99.0, 37.0,\n *           -105.0, 37.0\n *         ]),\n *         [new Cesium.PolygonHierarchy(\n *           Cesium.Cartesian3.fromDegreesArray([\n *             -103.0, 34.0,\n *             -101.0, 34.0,\n *             -101.0, 36.0,\n *             -103.0, 36.0\n *           ])\n *         )]\n *       )]\n *     )]\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n *\n * // 3. create extruded polygon\n * const extrudedPolygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   ),\n *   extrudedHeight: 300000\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n */\nfunction PolygonGeometry(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  if (\n    defined(options.perPositionHeight) &&\n    options.perPositionHeight &&\n    defined(options.height)\n  ) {\n    throw new DeveloperError(\n      \"Cannot use both options.perPositionHeight and options.height\"\n    );\n  }\n  if (\n    defined(options.arcType) &&\n    options.arcType !== ArcType.GEODESIC &&\n    options.arcType !== ArcType.RHUMB\n  ) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const stRotation = defaultValue(options.stRotation, 0.0);\n  const perPositionHeight = defaultValue(options.perPositionHeight, false);\n  const perPositionHeightExtrude =\n    perPositionHeight && defined(options.extrudedHeight);\n  let height = defaultValue(options.height, 0.0);\n  let extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  if (!perPositionHeightExtrude) {\n    const h = Math.max(height, extrudedHeight);\n    extrudedHeight = Math.min(height, extrudedHeight);\n    height = h;\n  }\n\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._granularity = granularity;\n  this._stRotation = stRotation;\n  this._height = height;\n  this._extrudedHeight = extrudedHeight;\n  this._closeTop = defaultValue(options.closeTop, true);\n  this._closeBottom = defaultValue(options.closeBottom, true);\n  this._polygonHierarchy = polygonHierarchy;\n  this._perPositionHeight = perPositionHeight;\n  this._perPositionHeightExtrude = perPositionHeightExtrude;\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createPolygonGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n  this._rectangle = undefined;\n  this._textureCoordinateRotationPoints = undefined;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n    Ellipsoid.packedLength +\n    VertexFormat.packedLength +\n    12;\n}\n\n/**\n * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {Number} [options.height=0.0] The height of the polygon.\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @returns {PolygonGeometry}\n *\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.PolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    granularity: options.granularity,\n    perPositionHeight: options.perPositionHeight,\n    closeTop: options.closeTop,\n    closeBottom: options.closeBottom,\n    offsetAttribute: options.offsetAttribute,\n    arcType: options.arcType,\n  };\n  return new PolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n  array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n  array[startingIndex++] = value._arcType;\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\n\n//Only used to avoid inability to default construct.\nconst dummyOptions = {\n  polygonHierarchy: {},\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonGeometry} [result] The object into which to store the result.\n */\nPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const height = array[startingIndex++];\n  const extrudedHeight = array[startingIndex++];\n  const granularity = array[startingIndex++];\n  const stRotation = array[startingIndex++];\n  const perPositionHeightExtrude = array[startingIndex++] === 1.0;\n  const perPositionHeight = array[startingIndex++] === 1.0;\n  const closeTop = array[startingIndex++] === 1.0;\n  const closeBottom = array[startingIndex++] === 1.0;\n  const shadowVolume = array[startingIndex++] === 1.0;\n  const offsetAttribute = array[startingIndex++];\n  const arcType = array[startingIndex++];\n  const packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new PolygonGeometry(dummyOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._granularity = granularity;\n  result._stRotation = stRotation;\n  result._perPositionHeightExtrude = perPositionHeightExtrude;\n  result._perPositionHeight = perPositionHeight;\n  result._closeTop = closeTop;\n  result._closeBottom = closeBottom;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n  result._arcType = arcType;\n  result.packedLength = packedLength;\n  return result;\n};\n\n/**\n * Returns the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle\n */\nPolygonGeometry.computeRectangle = function (options, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n  //>>includeStart('debug', pragmas.debug);\n  if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  return computeRectangle(\n    polygonHierarchy.positions,\n    ellipsoid,\n    arcType,\n    granularity,\n    result\n  );\n};\n\n/**\n * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const granularity = polygonGeometry._granularity;\n  const stRotation = polygonGeometry._stRotation;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const perPositionHeight = polygonGeometry._perPositionHeight;\n  const closeTop = polygonGeometry._closeTop;\n  const closeBottom = polygonGeometry._closeBottom;\n  const arcType = polygonGeometry._arcType;\n\n  let outerPositions = polygonHierarchy.positions;\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  const tangentPlane = EllipsoidTangentPlane.fromPoints(\n    outerPositions,\n    ellipsoid\n  );\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    tangentPlane.projectPointsOntoPlane.bind(tangentPlane),\n    !perPositionHeight,\n    ellipsoid\n  );\n\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n\n  outerPositions = hierarchy[0].outerRing;\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    tangentPlane.plane.normal,\n    tangentPlane.projectPointOntoPlane.bind(tangentPlane),\n    outerPositions,\n    stRotation,\n    scratchBoundingRectangle\n  );\n\n  const geometries = [];\n\n  const height = polygonGeometry._height;\n  const extrudedHeight = polygonGeometry._extrudedHeight;\n  const extrude =\n    polygonGeometry._perPositionHeightExtrude ||\n    !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n  const options = {\n    perPositionHeight: perPositionHeight,\n    vertexFormat: vertexFormat,\n    geometry: undefined,\n    tangentPlane: tangentPlane,\n    boundingRectangle: boundingRectangle,\n    ellipsoid: ellipsoid,\n    stRotation: stRotation,\n    bottom: false,\n    top: true,\n    wall: false,\n    extrude: false,\n    arcType: arcType,\n  };\n\n  let i;\n\n  if (extrude) {\n    options.extrude = true;\n    options.top = closeTop;\n    options.bottom = closeBottom;\n    options.shadowVolume = polygonGeometry._shadowVolume;\n    options.offsetAttribute = polygonGeometry._offsetAttribute;\n    for (i = 0; i < polygons.length; i++) {\n      const splitGeometry = createGeometryFromPositionsExtruded(\n        ellipsoid,\n        polygons[i],\n        granularity,\n        hierarchy[i],\n        perPositionHeight,\n        closeTop,\n        closeBottom,\n        vertexFormat,\n        arcType\n      );\n\n      let topAndBottom;\n      if (closeTop && closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          topAndBottom.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n      } else if (closeTop) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          height,\n          ellipsoid,\n          !perPositionHeight\n        );\n        options.geometry = topAndBottom.geometry;\n      } else if (closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          extrudedHeight,\n          ellipsoid,\n          true\n        );\n        options.geometry = topAndBottom.geometry;\n      }\n      if (closeTop || closeBottom) {\n        options.wall = false;\n        topAndBottom.geometry = computeAttributes(options);\n        geometries.push(topAndBottom);\n      }\n\n      const walls = splitGeometry.walls;\n      options.wall = true;\n      for (let k = 0; k < walls.length; k++) {\n        const wall = walls[k];\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          wall.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n        wall.geometry = computeAttributes(options);\n        geometries.push(wall);\n      }\n    }\n  } else {\n    for (i = 0; i < polygons.length; i++) {\n      const geometryInstance = new GeometryInstance({\n        geometry: PolygonGeometryLibrary.createGeometryFromPositions(\n          ellipsoid,\n          polygons[i],\n          granularity,\n          perPositionHeight,\n          vertexFormat,\n          arcType\n        ),\n      });\n      geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n        geometryInstance.geometry.attributes.position.values,\n        height,\n        ellipsoid,\n        !perPositionHeight\n      );\n      options.geometry = geometryInstance.geometry;\n      geometryInstance.geometry = computeAttributes(options);\n\n      if (defined(polygonGeometry._offsetAttribute)) {\n        const length =\n          geometryInstance.geometry.attributes.position.values.length;\n        const applyOffset = new Uint8Array(length / 3);\n        const offsetValue =\n          polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n            ? 0\n            : 1;\n        arrayFill(applyOffset, offsetValue);\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n          {\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: applyOffset,\n          }\n        );\n      }\n\n      geometries.push(geometryInstance);\n    }\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  const attributes = geometry.attributes;\n  const boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values\n  );\n\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n    offsetAttribute: polygonGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nPolygonGeometry.createShadowVolume = function (\n  polygonGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = polygonGeometry._granularity;\n  const ellipsoid = polygonGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new PolygonGeometry({\n    polygonHierarchy: polygonGeometry._polygonHierarchy,\n    ellipsoid: ellipsoid,\n    stRotation: polygonGeometry._stRotation,\n    granularity: granularity,\n    perPositionHeight: false,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n    arcType: polygonGeometry._arcType,\n  });\n};\n\nfunction textureCoordinateRotationPoints(polygonGeometry) {\n  const stRotation = -polygonGeometry._stRotation;\n  if (stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const positions = polygonGeometry._polygonHierarchy.positions;\n  const boundingRectangle = polygonGeometry.rectangle;\n  return Geometry._textureCoordinateRotationPoints(\n    positions,\n    stRotation,\n    ellipsoid,\n    boundingRectangle\n  );\n}\n\nObject.defineProperties(PolygonGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        const positions = this._polygonHierarchy.positions;\n        this._rectangle = computeRectangle(\n          positions,\n          this._ellipsoid,\n          this._arcType,\n          this._granularity\n        );\n      }\n\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!defined(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default PolygonGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\n\nfunction createPolygonGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\n  }\n  polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\n  return PolygonGeometry.createGeometry(polygonGeometry);\n}\nexport default createPolygonGeometry;\n"],"names":["scratchCarto1","Cartographic","scratchCarto2","adjustPosHeightsForNormal","position","p1","p2","ellipsoid","height","cartesianToCartographic","p1Carto","cartographicToCartesian","p2Carto","scratchBoundingRectangle","BoundingRectangle","scratchPosition","Cartesian3","scratchNormal","scratchTangent","scratchBitangent","p1Scratch","p2Scratch","scratchPerPosNormal","scratchPerPosTangent","scratchPerPosBitangent","appendTextureCoordinatesOrigin","Cartesian2","appendTextureCoordinatesCartesian2","appendTextureCoordinatesCartesian3","appendTextureCoordinatesQuaternion","Quaternion","appendTextureCoordinatesMatrix3","Matrix3","tangentMatrixScratch","computeAttributes","options","vertexFormat","geometry","shadowVolume","flatPositions","attributes","values","length","wall","top","bottom","st","normal","tangent","bitangent","boundingRectangle","tangentPlane","stRotation","perPositionHeight","origin","x","y","textureCoordinates","Float32Array","undefined","normals","tangents","bitangents","extrudeNormals","textureCoordIndex","attrIndex","recomputeNormal","textureMatrix","tangentRotationMatrix","rotation","fromAxisAngle","_plane","fromQuaternion","clone","IDENTITY","bottomOffset","bottomOffset2","i","fromArray","p","multiplyByVector","scaleToGeodeticSurface","projectPointOntoPlane","subtract","stx","CesiumMath","clamp","width","sty","attrIndex1","attrIndex2","normalize","cross","equalsEpsilon","EPSILON10","geodeticSurfaceNormal","UNIT_Z","z","GeometryAttribute","componentDatatype","ComponentDatatype","FLOAT","componentsPerAttribute","extrudeDirection","extrude","defined","offsetAttribute","size","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","offsetValue","NONE","applyOffset","UNSIGNED_BYTE","startCartographicScratch","endCartographicScratch","idlCross","westOverIDL","eastOverIDL","ellipsoidGeodesic","EllipsoidGeodesic","computeRectangle","positions","arcType","granularity","result","defaultValue","Rectangle","west","north","south","east","ArcType","RHUMB","fromCartesianArray","equals","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","inverseChordLength","chordLength","maximumRadius","positionsLength","swap","endCartographic","startCartographic","setEndPoints","interpolateAndGrowRectangle","PI","TWO_PI","interpolatedCartographicScratch","segmentLength","surfaceDistance","numPoints","Math","ceil","subsegmentDistance","interpolationDistance","interpolatedCartographic","interpolateUsingSurfaceDistance","longitude","latitude","min","max","lonAdjusted","createGeometryFromPositionsExtrudedPositions","createGeometryFromPositionsExtruded","polygon","hierarchy","closeTop","closeBottom","geos","walls","topGeo","PolygonGeometryLibrary","createGeometryFromPositions","edgePoints","indices","numPositions","newIndices","topBottomPositions","concat","IndexDatatype","createTypedArray","set","ilength","i0","i1","i2","topAndBottom","GeometryInstance","outerRing","EllipsoidTangentPlane","fromPoints","positions2D","projectPointsOntoPlane","windingOrder","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","slice","reverse","wallGeo","computeWallGeometry","push","holes","hole","COUNTER_CLOCKWISE","PolygonGeometry","Check","typeOf","object","polygonHierarchy","DeveloperError","GEODESIC","VertexFormat","DEFAULT","Ellipsoid","WGS84","RADIANS_PER_DEGREE","perPositionHeightExtrude","extrudedHeight","h","this","_vertexFormat","_ellipsoid","_granularity","_stRotation","_height","_extrudedHeight","_closeTop","_closeBottom","_polygonHierarchy","_perPositionHeight","_perPositionHeightExtrude","_shadowVolume","_workerName","_offsetAttribute","_arcType","_rectangle","_textureCoordinateRotationPoints","packedLength","computeHierarchyPackedLength","fromPositions","EMPTY_OBJECT","pack","value","array","startingIndex","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","dummyOptions","unpack","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","results","polygonsFromHierarchy","bind","polygons","computeBoundingRectangle","plane","geometries","EPSILON2","splitGeometry","scaleToGeodeticHeightExtruded","scaleToGeodeticHeight","k","geometryInstance","GeometryPipeline","combineInstances","Float64Array","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints","offset"],"mappings":"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"}