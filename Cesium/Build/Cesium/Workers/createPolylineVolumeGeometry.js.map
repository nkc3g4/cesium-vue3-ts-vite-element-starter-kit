{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../../Source/Core/PolylineVolumeGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(\n  combinedPositions,\n  shape,\n  boundingRectangle,\n  vertexFormat\n) {\n  const attributes = new GeometryAttributes();\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: combinedPositions,\n    });\n  }\n  const shapeLength = shape.length;\n  const vertexCount = combinedPositions.length / 3;\n  const length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n  const firstEndIndices = PolygonPipeline.triangulate(shape);\n\n  const indicesCount =\n    (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\n  const indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n  let i, j;\n  let ll, ul, ur, lr;\n  const offset = shapeLength * 2;\n  let index = 0;\n  for (i = 0; i < length - 1; i++) {\n    for (j = 0; j < shapeLength - 1; j++) {\n      ll = j * 2 + i * shapeLength * 2;\n      lr = ll + offset;\n      ul = ll + 1;\n      ur = ul + offset;\n\n      indices[index++] = ul;\n      indices[index++] = ll;\n      indices[index++] = ur;\n      indices[index++] = ur;\n      indices[index++] = ll;\n      indices[index++] = lr;\n    }\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n    ul = ll + 1;\n    ur = ul + offset;\n    lr = ll + offset;\n\n    indices[index++] = ul;\n    indices[index++] = ll;\n    indices[index++] = ur;\n    indices[index++] = ur;\n    indices[index++] = ll;\n    indices[index++] = lr;\n  }\n\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\n    // st required for tangent/bitangent calculation\n    const st = new Float32Array(vertexCount * 2);\n    const lengthSt = 1 / (length - 1);\n    const heightSt = 1 / boundingRectangle.height;\n    const heightOffset = boundingRectangle.height / 2;\n    let s, t;\n    let stindex = 0;\n    for (i = 0; i < length; i++) {\n      s = i * lengthSt;\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n      for (j = 1; j < shapeLength; j++) {\n        t = heightSt * (shape[j].y + heightOffset);\n        st[stindex++] = s;\n        st[stindex++] = t;\n        st[stindex++] = s;\n        st[stindex++] = t;\n      }\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = 0;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = (length - 1) * lengthSt;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: new Float32Array(st),\n    });\n  }\n\n  const endOffset = vertexCount - shapeLength * 2;\n  for (i = 0; i < firstEndIndices.length; i += 3) {\n    const v0 = firstEndIndices[i] + endOffset;\n    const v1 = firstEndIndices[i + 1] + endOffset;\n    const v2 = firstEndIndices[i + 2] + endOffset;\n\n    indices[index++] = v0;\n    indices[index++] = v1;\n    indices[index++] = v2;\n    indices[index++] = v2 + shapeLength;\n    indices[index++] = v1 + shapeLength;\n    indices[index++] = v0 + shapeLength;\n  }\n\n  let geometry = new Geometry({\n    attributes: attributes,\n    indices: indices,\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  if (vertexFormat.normal) {\n    geometry = GeometryPipeline.computeNormal(geometry);\n  }\n\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\n    try {\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n    } catch (e) {\n      oneTimeWarning(\n        \"polyline-volume-tangent-bitangent\",\n        \"Unable to compute tangents and bitangents for polyline volume geometry\"\n      );\n      //TODO https://github.com/CesiumGS/cesium/issues/3609\n    }\n\n    if (!vertexFormat.tangent) {\n      geometry.attributes.tangent = undefined;\n    }\n    if (!vertexFormat.bitangent) {\n      geometry.attributes.bitangent = undefined;\n    }\n    if (!vertexFormat.st) {\n      geometry.attributes.st = undefined;\n    }\n  }\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesian3} positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n *\n * @example\n * function computeCircle(radius) {\n *   const positions = [];\n *   for (let i = 0; i < 360; i++) {\n *     const radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * const volume = new Cesium.PolylineVolumeGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.polylinePositions;\n  const shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._workerName = \"createPolylineVolumeGeometry\";\n\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  const positions = value._positions;\n  let length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  const shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n */\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  let length = array[startingIndex++];\n  const positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  const shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const cornerType = array[startingIndex++];\n  const granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nconst brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\n  const positions = polylineVolumeGeometry._positions;\n  const cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  let shape2D = polylineVolumeGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  const boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  const computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry,\n    true\n  );\n  return computeAttributes(\n    computedPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry._vertexFormat\n  );\n};\nexport default PolylineVolumeGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\n\nfunction createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\n  if (defined(offset)) {\n    polylineVolumeGeometry = PolylineVolumeGeometry.unpack(\n      polylineVolumeGeometry,\n      offset\n    );\n  }\n  polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(\n    polylineVolumeGeometry._ellipsoid\n  );\n  return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\n}\nexport default createPolylineVolumeGeometry;\n"],"names":["PolylineVolumeGeometry","options","positions","defaultValue","EMPTY_OBJECT","polylinePositions","shape","shapePositions","defined","DeveloperError","this","_positions","_shape","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","CornerType","ROUNDED","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_workerName","numComponents","length","Cartesian3","packedLength","Cartesian2","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","brScratch","BoundingRectangle","createGeometry","polylineVolumeGeometry","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","shape2D","PolylineVolumeGeometryLibrary","removeDuplicatesFromShape","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","boundingRectangle","fromPoints","combinedPositions","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","vertexCount","firstEndIndices","triangulate","indicesCount","indices","IndexDatatype","createTypedArray","j","ll","ul","ur","lr","offset","index","st","tangent","bitangent","Float32Array","lengthSt","heightSt","height","heightOffset","s","t","stindex","y","FLOAT","endOffset","v0","v1","v2","geometry","Geometry","boundingSphere","BoundingSphere","fromVertices","primitiveType","PrimitiveType","TRIANGLES","normal","GeometryPipeline","computeNormal","computeTangentAndBitangent","e","oneTimeWarning","computeAttributes","computePositions"],"mappings":"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"}