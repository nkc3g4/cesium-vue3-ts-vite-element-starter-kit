{"version":3,"file":"EllipsoidGeodesic-ed024f16.js","sources":["../../../../Source/Core/EllipsoidGeodesic.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction setConstants(ellipsoidGeodesic) {\n  const uSquared = ellipsoidGeodesic._uSquared;\n  const a = ellipsoidGeodesic._ellipsoid.maximumRadius;\n  const b = ellipsoidGeodesic._ellipsoid.minimumRadius;\n  const f = (a - b) / a;\n\n  const cosineHeading = Math.cos(ellipsoidGeodesic._startHeading);\n  const sineHeading = Math.sin(ellipsoidGeodesic._startHeading);\n\n  const tanU = (1 - f) * Math.tan(ellipsoidGeodesic._start.latitude);\n\n  const cosineU = 1.0 / Math.sqrt(1.0 + tanU * tanU);\n  const sineU = cosineU * tanU;\n\n  const sigma = Math.atan2(tanU, cosineHeading);\n\n  const sineAlpha = cosineU * sineHeading;\n  const sineSquaredAlpha = sineAlpha * sineAlpha;\n\n  const cosineSquaredAlpha = 1.0 - sineSquaredAlpha;\n  const cosineAlpha = Math.sqrt(cosineSquaredAlpha);\n\n  const u2Over4 = uSquared / 4.0;\n  const u4Over16 = u2Over4 * u2Over4;\n  const u6Over64 = u4Over16 * u2Over4;\n  const u8Over256 = u4Over16 * u4Over16;\n\n  const a0 =\n    1.0 +\n    u2Over4 -\n    (3.0 * u4Over16) / 4.0 +\n    (5.0 * u6Over64) / 4.0 -\n    (175.0 * u8Over256) / 64.0;\n  const a1 = 1.0 - u2Over4 + (15.0 * u4Over16) / 8.0 - (35.0 * u6Over64) / 8.0;\n  const a2 = 1.0 - 3.0 * u2Over4 + (35.0 * u4Over16) / 4.0;\n  const a3 = 1.0 - 5.0 * u2Over4;\n\n  const distanceRatio =\n    a0 * sigma -\n    (a1 * Math.sin(2.0 * sigma) * u2Over4) / 2.0 -\n    (a2 * Math.sin(4.0 * sigma) * u4Over16) / 16.0 -\n    (a3 * Math.sin(6.0 * sigma) * u6Over64) / 48.0 -\n    (Math.sin(8.0 * sigma) * 5.0 * u8Over256) / 512;\n\n  const constants = ellipsoidGeodesic._constants;\n\n  constants.a = a;\n  constants.b = b;\n  constants.f = f;\n  constants.cosineHeading = cosineHeading;\n  constants.sineHeading = sineHeading;\n  constants.tanU = tanU;\n  constants.cosineU = cosineU;\n  constants.sineU = sineU;\n  constants.sigma = sigma;\n  constants.sineAlpha = sineAlpha;\n  constants.sineSquaredAlpha = sineSquaredAlpha;\n  constants.cosineSquaredAlpha = cosineSquaredAlpha;\n  constants.cosineAlpha = cosineAlpha;\n  constants.u2Over4 = u2Over4;\n  constants.u4Over16 = u4Over16;\n  constants.u6Over64 = u6Over64;\n  constants.u8Over256 = u8Over256;\n  constants.a0 = a0;\n  constants.a1 = a1;\n  constants.a2 = a2;\n  constants.a3 = a3;\n  constants.distanceRatio = distanceRatio;\n}\n\nfunction computeC(f, cosineSquaredAlpha) {\n  return (\n    (f * cosineSquaredAlpha * (4.0 + f * (4.0 - 3.0 * cosineSquaredAlpha))) /\n    16.0\n  );\n}\n\nfunction computeDeltaLambda(\n  f,\n  sineAlpha,\n  cosineSquaredAlpha,\n  sigma,\n  sineSigma,\n  cosineSigma,\n  cosineTwiceSigmaMidpoint\n) {\n  const C = computeC(f, cosineSquaredAlpha);\n\n  return (\n    (1.0 - C) *\n    f *\n    sineAlpha *\n    (sigma +\n      C *\n        sineSigma *\n        (cosineTwiceSigmaMidpoint +\n          C *\n            cosineSigma *\n            (2.0 * cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint - 1.0)))\n  );\n}\n\nfunction vincentyInverseFormula(\n  ellipsoidGeodesic,\n  major,\n  minor,\n  firstLongitude,\n  firstLatitude,\n  secondLongitude,\n  secondLatitude\n) {\n  const eff = (major - minor) / major;\n  const l = secondLongitude - firstLongitude;\n\n  const u1 = Math.atan((1 - eff) * Math.tan(firstLatitude));\n  const u2 = Math.atan((1 - eff) * Math.tan(secondLatitude));\n\n  const cosineU1 = Math.cos(u1);\n  const sineU1 = Math.sin(u1);\n  const cosineU2 = Math.cos(u2);\n  const sineU2 = Math.sin(u2);\n\n  const cc = cosineU1 * cosineU2;\n  const cs = cosineU1 * sineU2;\n  const ss = sineU1 * sineU2;\n  const sc = sineU1 * cosineU2;\n\n  let lambda = l;\n  let lambdaDot = CesiumMath.TWO_PI;\n\n  let cosineLambda = Math.cos(lambda);\n  let sineLambda = Math.sin(lambda);\n\n  let sigma;\n  let cosineSigma;\n  let sineSigma;\n  let cosineSquaredAlpha;\n  let cosineTwiceSigmaMidpoint;\n\n  do {\n    cosineLambda = Math.cos(lambda);\n    sineLambda = Math.sin(lambda);\n\n    const temp = cs - sc * cosineLambda;\n    sineSigma = Math.sqrt(\n      cosineU2 * cosineU2 * sineLambda * sineLambda + temp * temp\n    );\n    cosineSigma = ss + cc * cosineLambda;\n\n    sigma = Math.atan2(sineSigma, cosineSigma);\n\n    let sineAlpha;\n\n    if (sineSigma === 0.0) {\n      sineAlpha = 0.0;\n      cosineSquaredAlpha = 1.0;\n    } else {\n      sineAlpha = (cc * sineLambda) / sineSigma;\n      cosineSquaredAlpha = 1.0 - sineAlpha * sineAlpha;\n    }\n\n    lambdaDot = lambda;\n\n    cosineTwiceSigmaMidpoint = cosineSigma - (2.0 * ss) / cosineSquaredAlpha;\n\n    if (!isFinite(cosineTwiceSigmaMidpoint)) {\n      cosineTwiceSigmaMidpoint = 0.0;\n    }\n\n    lambda =\n      l +\n      computeDeltaLambda(\n        eff,\n        sineAlpha,\n        cosineSquaredAlpha,\n        sigma,\n        sineSigma,\n        cosineSigma,\n        cosineTwiceSigmaMidpoint\n      );\n  } while (Math.abs(lambda - lambdaDot) > CesiumMath.EPSILON12);\n\n  const uSquared =\n    (cosineSquaredAlpha * (major * major - minor * minor)) / (minor * minor);\n  const A =\n    1.0 +\n    (uSquared *\n      (4096.0 + uSquared * (uSquared * (320.0 - 175.0 * uSquared) - 768.0))) /\n      16384.0;\n  const B =\n    (uSquared *\n      (256.0 + uSquared * (uSquared * (74.0 - 47.0 * uSquared) - 128.0))) /\n    1024.0;\n\n  const cosineSquaredTwiceSigmaMidpoint =\n    cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint;\n  const deltaSigma =\n    B *\n    sineSigma *\n    (cosineTwiceSigmaMidpoint +\n      (B *\n        (cosineSigma * (2.0 * cosineSquaredTwiceSigmaMidpoint - 1.0) -\n          (B *\n            cosineTwiceSigmaMidpoint *\n            (4.0 * sineSigma * sineSigma - 3.0) *\n            (4.0 * cosineSquaredTwiceSigmaMidpoint - 3.0)) /\n            6.0)) /\n        4.0);\n\n  const distance = minor * A * (sigma - deltaSigma);\n\n  const startHeading = Math.atan2(\n    cosineU2 * sineLambda,\n    cs - sc * cosineLambda\n  );\n  const endHeading = Math.atan2(cosineU1 * sineLambda, cs * cosineLambda - sc);\n\n  ellipsoidGeodesic._distance = distance;\n  ellipsoidGeodesic._startHeading = startHeading;\n  ellipsoidGeodesic._endHeading = endHeading;\n  ellipsoidGeodesic._uSquared = uSquared;\n}\n\nconst scratchCart1 = new Cartesian3();\nconst scratchCart2 = new Cartesian3();\nfunction computeProperties(ellipsoidGeodesic, start, end, ellipsoid) {\n  const firstCartesian = Cartesian3.normalize(\n    ellipsoid.cartographicToCartesian(start, scratchCart2),\n    scratchCart1\n  );\n  const lastCartesian = Cartesian3.normalize(\n    ellipsoid.cartographicToCartesian(end, scratchCart2),\n    scratchCart2\n  );\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\n    \"value\",\n    Math.abs(\n      Math.abs(Cartesian3.angleBetween(firstCartesian, lastCartesian)) - Math.PI\n    ),\n    0.0125\n  );\n  //>>includeEnd('debug');\n\n  vincentyInverseFormula(\n    ellipsoidGeodesic,\n    ellipsoid.maximumRadius,\n    ellipsoid.minimumRadius,\n    start.longitude,\n    start.latitude,\n    end.longitude,\n    end.latitude\n  );\n\n  ellipsoidGeodesic._start = Cartographic.clone(\n    start,\n    ellipsoidGeodesic._start\n  );\n  ellipsoidGeodesic._end = Cartographic.clone(end, ellipsoidGeodesic._end);\n  ellipsoidGeodesic._start.height = 0;\n  ellipsoidGeodesic._end.height = 0;\n\n  setConstants(ellipsoidGeodesic);\n}\n\n/**\n * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.\n *\n * @alias EllipsoidGeodesic\n * @constructor\n *\n * @param {Cartographic} [start] The initial planetodetic point on the path.\n * @param {Cartographic} [end] The final planetodetic point on the path.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.\n */\nfunction EllipsoidGeodesic(start, end, ellipsoid) {\n  const e = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._ellipsoid = e;\n  this._start = new Cartographic();\n  this._end = new Cartographic();\n\n  this._constants = {};\n  this._startHeading = undefined;\n  this._endHeading = undefined;\n  this._distance = undefined;\n  this._uSquared = undefined;\n\n  if (defined(start) && defined(end)) {\n    computeProperties(this, start, end, e);\n  }\n}\n\nObject.defineProperties(EllipsoidGeodesic.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the surface distance between the start and end point\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  surfaceDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._distance;\n    },\n  },\n\n  /**\n   * Gets the initial planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  start: {\n    get: function () {\n      return this._start;\n    },\n  },\n\n  /**\n   * Gets the final planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  end: {\n    get: function () {\n      return this._end;\n    },\n  },\n\n  /**\n   * Gets the heading at the initial point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  startHeading: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._startHeading;\n    },\n  },\n\n  /**\n   * Gets the heading at the final point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  endHeading: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._endHeading;\n    },\n  },\n});\n\n/**\n * Sets the start and end points of the geodesic\n *\n * @param {Cartographic} start The initial planetodetic point on the path.\n * @param {Cartographic} end The final planetodetic point on the path.\n */\nEllipsoidGeodesic.prototype.setEndPoints = function (start, end) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"start\", start);\n  Check.defined(\"end\", end);\n  //>>includeEnd('debug');\n\n  computeProperties(this, start, end, this._ellipsoid);\n};\n\n/**\n * Provides the location of a point at the indicated portion along the geodesic.\n *\n * @param {Number} fraction The portion of the distance between the initial and final points.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n */\nEllipsoidGeodesic.prototype.interpolateUsingFraction = function (\n  fraction,\n  result\n) {\n  return this.interpolateUsingSurfaceDistance(\n    this._distance * fraction,\n    result\n  );\n};\n\n/**\n * Provides the location of a point at the indicated distance along the geodesic.\n *\n * @param {Number} distance The distance from the inital point to the point of interest along the geodesic\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n *\n * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance\n */\nEllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance = function (\n  distance,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"distance\", this._distance);\n  //>>includeEnd('debug');\n\n  const constants = this._constants;\n\n  const s = constants.distanceRatio + distance / constants.b;\n\n  const cosine2S = Math.cos(2.0 * s);\n  const cosine4S = Math.cos(4.0 * s);\n  const cosine6S = Math.cos(6.0 * s);\n  const sine2S = Math.sin(2.0 * s);\n  const sine4S = Math.sin(4.0 * s);\n  const sine6S = Math.sin(6.0 * s);\n  const sine8S = Math.sin(8.0 * s);\n\n  const s2 = s * s;\n  const s3 = s * s2;\n\n  const u8Over256 = constants.u8Over256;\n  const u2Over4 = constants.u2Over4;\n  const u6Over64 = constants.u6Over64;\n  const u4Over16 = constants.u4Over16;\n  let sigma =\n    (2.0 * s3 * u8Over256 * cosine2S) / 3.0 +\n    s *\n      (1.0 -\n        u2Over4 +\n        (7.0 * u4Over16) / 4.0 -\n        (15.0 * u6Over64) / 4.0 +\n        (579.0 * u8Over256) / 64.0 -\n        (u4Over16 - (15.0 * u6Over64) / 4.0 + (187.0 * u8Over256) / 16.0) *\n          cosine2S -\n        ((5.0 * u6Over64) / 4.0 - (115.0 * u8Over256) / 16.0) * cosine4S -\n        (29.0 * u8Over256 * cosine6S) / 16.0) +\n    (u2Over4 / 2.0 -\n      u4Over16 +\n      (71.0 * u6Over64) / 32.0 -\n      (85.0 * u8Over256) / 16.0) *\n      sine2S +\n    ((5.0 * u4Over16) / 16.0 -\n      (5.0 * u6Over64) / 4.0 +\n      (383.0 * u8Over256) / 96.0) *\n      sine4S -\n    s2 *\n      ((u6Over64 - (11.0 * u8Over256) / 2.0) * sine2S +\n        (5.0 * u8Over256 * sine4S) / 2.0) +\n    ((29.0 * u6Over64) / 96.0 - (29.0 * u8Over256) / 16.0) * sine6S +\n    (539.0 * u8Over256 * sine8S) / 1536.0;\n\n  const theta = Math.asin(Math.sin(sigma) * constants.cosineAlpha);\n  const latitude = Math.atan((constants.a / constants.b) * Math.tan(theta));\n\n  // Redefine in terms of relative argument of latitude.\n  sigma = sigma - constants.sigma;\n\n  const cosineTwiceSigmaMidpoint = Math.cos(2.0 * constants.sigma + sigma);\n\n  const sineSigma = Math.sin(sigma);\n  const cosineSigma = Math.cos(sigma);\n\n  const cc = constants.cosineU * cosineSigma;\n  const ss = constants.sineU * sineSigma;\n\n  const lambda = Math.atan2(\n    sineSigma * constants.sineHeading,\n    cc - ss * constants.cosineHeading\n  );\n\n  const l =\n    lambda -\n    computeDeltaLambda(\n      constants.f,\n      constants.sineAlpha,\n      constants.cosineSquaredAlpha,\n      sigma,\n      sineSigma,\n      cosineSigma,\n      cosineTwiceSigmaMidpoint\n    );\n\n  if (defined(result)) {\n    result.longitude = this._start.longitude + l;\n    result.latitude = latitude;\n    result.height = 0.0;\n    return result;\n  }\n\n  return new Cartographic(this._start.longitude + l, latitude, 0.0);\n};\nexport default EllipsoidGeodesic;\n"],"names":["computeDeltaLambda","f","sineAlpha","cosineSquaredAlpha","sigma","sineSigma","cosineSigma","cosineTwiceSigmaMidpoint","C","computeC","scratchCart1","Cartesian3","scratchCart2","computeProperties","ellipsoidGeodesic","start","end","ellipsoid","firstCartesian","normalize","cartographicToCartesian","lastCartesian","Check","typeOf","number","greaterThanOrEquals","Math","abs","angleBetween","PI","major","minor","firstLongitude","firstLatitude","secondLongitude","secondLatitude","eff","l","u1","atan","tan","u2","cosineU1","cos","sineU1","sin","cosineU2","sineU2","cc","cs","ss","sc","lambda","lambdaDot","CesiumMath","TWO_PI","cosineLambda","sineLambda","temp","sqrt","atan2","isFinite","EPSILON12","uSquared","B","cosineSquaredTwiceSigmaMidpoint","distance","startHeading","endHeading","_distance","_startHeading","_endHeading","_uSquared","vincentyInverseFormula","maximumRadius","minimumRadius","longitude","latitude","_start","Cartographic","clone","_end","height","a","_ellipsoid","b","cosineHeading","sineHeading","tanU","cosineU","sineU","sineSquaredAlpha","cosineAlpha","u2Over4","u4Over16","u6Over64","u8Over256","a0","a1","a2","a3","distanceRatio","constants","_constants","setConstants","EllipsoidGeodesic","e","defaultValue","Ellipsoid","WGS84","this","undefined","defined","Object","defineProperties","prototype","get","surfaceDistance","setEndPoints","interpolateUsingFraction","fraction","result","interpolateUsingSurfaceDistance","s","cosine2S","cosine4S","cosine6S","sine2S","sine4S","sine6S","sine8S","s2","s3","theta","asin"],"mappings":"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"}