{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryType from \"./GeometryType.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst scratchInterpolateColorsArray = [];\n\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\n  const colors = scratchInterpolateColorsArray;\n  colors.length = numPoints;\n  let i;\n\n  const r0 = color0.red;\n  const g0 = color0.green;\n  const b0 = color0.blue;\n  const a0 = color0.alpha;\n\n  const r1 = color1.red;\n  const g1 = color1.green;\n  const b1 = color1.blue;\n  const a1 = color1.alpha;\n\n  if (Color.equals(color0, color1)) {\n    for (i = 0; i < numPoints; i++) {\n      colors[i] = Color.clone(color0);\n    }\n    return colors;\n  }\n\n  const redPerVertex = (r1 - r0) / numPoints;\n  const greenPerVertex = (g1 - g0) / numPoints;\n  const bluePerVertex = (b1 - b0) / numPoints;\n  const alphaPerVertex = (a1 - a0) / numPoints;\n\n  for (i = 0; i < numPoints; i++) {\n    colors[i] = new Color(\n      r0 + i * redPerVertex,\n      g0 + i * greenPerVertex,\n      b0 + i * bluePerVertex,\n      a0 + i * alphaPerVertex\n    );\n  }\n\n  return colors;\n}\n\n/**\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n * and each additional position defines a line segment from the previous position. The polyline is capable of\n * displaying with a material.\n *\n * @alias PolylineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n * @param {Number} [options.width=1.0] The width in pixels.\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n *\n * @exception {DeveloperError} At least two positions are required.\n * @exception {DeveloperError} width must be greater than or equal to one.\n * @exception {DeveloperError} colors has an invalid length.\n *\n * @see PolylineGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n *\n * @example\n * // A polyline with two connected line segments\n * const polyline = new Cesium.PolylineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     0.0, 0.0,\n *     5.0, 0.0,\n *     5.0, 5.0\n *   ]),\n *   width : 10.0\n * });\n * const geometry = Cesium.PolylineGeometry.createGeometry(polyline);\n */\nfunction PolylineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const positions = options.positions;\n  const colors = options.colors;\n  const width = defaultValue(options.width, 1.0);\n  const colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions) || positions.length < 2) {\n    throw new DeveloperError(\"At least two positions are required.\");\n  }\n  if (typeof width !== \"number\") {\n    throw new DeveloperError(\"width must be a number\");\n  }\n  if (\n    defined(colors) &&\n    ((colorsPerVertex && colors.length < positions.length) ||\n      (!colorsPerVertex && colors.length < positions.length - 1))\n  ) {\n    throw new DeveloperError(\"colors has an invalid length.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._colors = colors;\n  this._width = width;\n  this._colorsPerVertex = colorsPerVertex;\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createPolylineGeometry\";\n\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  const positions = value._positions;\n  let length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  const colors = value._colors;\n  length = defined(colors) ? colors.length : 0.0;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n    Color.pack(colors[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._width;\n  array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n  array[startingIndex++] = value._arcType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  positions: undefined,\n  colors: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  width: undefined,\n  colorsPerVertex: undefined,\n  arcType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineGeometry} [result] The object into which to store the result.\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\n */\nPolylineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  let i;\n\n  let length = array[startingIndex++];\n  const positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  const colors = length > 0 ? new Array(length) : undefined;\n\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n    colors[i] = Color.unpack(array, startingIndex);\n  }\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const width = array[startingIndex++];\n  const colorsPerVertex = array[startingIndex++] === 1.0;\n  const arcType = array[startingIndex++];\n  const granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.colors = colors;\n    scratchOptions.width = width;\n    scratchOptions.colorsPerVertex = colorsPerVertex;\n    scratchOptions.arcType = arcType;\n    scratchOptions.granularity = granularity;\n    return new PolylineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._colors = colors;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._width = width;\n  result._colorsPerVertex = colorsPerVertex;\n  result._arcType = arcType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nconst scratchCartesian3 = new Cartesian3();\nconst scratchPosition = new Cartesian3();\nconst scratchPrevPosition = new Cartesian3();\nconst scratchNextPosition = new Cartesian3();\n\n/**\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineGeometry.createGeometry = function (polylineGeometry) {\n  const width = polylineGeometry._width;\n  const vertexFormat = polylineGeometry._vertexFormat;\n  let colors = polylineGeometry._colors;\n  const colorsPerVertex = polylineGeometry._colorsPerVertex;\n  const arcType = polylineGeometry._arcType;\n  const granularity = polylineGeometry._granularity;\n  const ellipsoid = polylineGeometry._ellipsoid;\n\n  let i;\n  let j;\n  let k;\n\n  const removedIndices = [];\n  let positions = arrayRemoveDuplicates(\n    polylineGeometry._positions,\n    Cartesian3.equalsEpsilon,\n    false,\n    removedIndices\n  );\n\n  if (defined(colors) && removedIndices.length > 0) {\n    let removedArrayIndex = 0;\n    let nextRemovedIndex = removedIndices[0];\n    colors = colors.filter(function (color, index) {\n      let remove = false;\n      if (colorsPerVertex) {\n        remove =\n          index === nextRemovedIndex || (index === 0 && nextRemovedIndex === 1);\n      } else {\n        remove = index + 1 === nextRemovedIndex;\n      }\n\n      if (remove) {\n        removedArrayIndex++;\n        nextRemovedIndex = removedIndices[removedArrayIndex];\n        return false;\n      }\n      return true;\n    });\n  }\n\n  let positionsLength = positions.length;\n\n  // A width of a pixel or less is not a valid geometry, but in order to support external data\n  // that may have errors we treat this as an empty geometry.\n  if (positionsLength < 2 || width <= 0.0) {\n    return undefined;\n  }\n\n  if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n    let subdivisionSize;\n    let numberOfPointsFunction;\n    if (arcType === ArcType.GEODESIC) {\n      subdivisionSize = CesiumMath.chordLength(\n        granularity,\n        ellipsoid.maximumRadius\n      );\n      numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n    } else {\n      subdivisionSize = granularity;\n      numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n    }\n\n    const heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n    if (defined(colors)) {\n      let colorLength = 1;\n      for (i = 0; i < positionsLength - 1; ++i) {\n        colorLength += numberOfPointsFunction(\n          positions[i],\n          positions[i + 1],\n          subdivisionSize\n        );\n      }\n\n      const newColors = new Array(colorLength);\n      let newColorIndex = 0;\n\n      for (i = 0; i < positionsLength - 1; ++i) {\n        const p0 = positions[i];\n        const p1 = positions[i + 1];\n        const c0 = colors[i];\n\n        const numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\n        if (colorsPerVertex && i < colorLength) {\n          const c1 = colors[i + 1];\n          const interpolatedColors = interpolateColors(\n            p0,\n            p1,\n            c0,\n            c1,\n            numColors\n          );\n          const interpolatedColorsLength = interpolatedColors.length;\n          for (j = 0; j < interpolatedColorsLength; ++j) {\n            newColors[newColorIndex++] = interpolatedColors[j];\n          }\n        } else {\n          for (j = 0; j < numColors; ++j) {\n            newColors[newColorIndex++] = Color.clone(c0);\n          }\n        }\n      }\n\n      newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\n      colors = newColors;\n\n      scratchInterpolateColorsArray.length = 0;\n    }\n\n    if (arcType === ArcType.GEODESIC) {\n      positions = PolylinePipeline.generateCartesianArc({\n        positions: positions,\n        minDistance: subdivisionSize,\n        ellipsoid: ellipsoid,\n        height: heights,\n      });\n    } else {\n      positions = PolylinePipeline.generateCartesianRhumbArc({\n        positions: positions,\n        granularity: subdivisionSize,\n        ellipsoid: ellipsoid,\n        height: heights,\n      });\n    }\n  }\n\n  positionsLength = positions.length;\n  const size = positionsLength * 4.0 - 4.0;\n\n  const finalPositions = new Float64Array(size * 3);\n  const prevPositions = new Float64Array(size * 3);\n  const nextPositions = new Float64Array(size * 3);\n  const expandAndWidth = new Float32Array(size * 2);\n  const st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\n  const finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\n\n  let positionIndex = 0;\n  let expandAndWidthIndex = 0;\n  let stIndex = 0;\n  let colorIndex = 0;\n  let position;\n\n  for (j = 0; j < positionsLength; ++j) {\n    if (j === 0) {\n      position = scratchCartesian3;\n      Cartesian3.subtract(positions[0], positions[1], position);\n      Cartesian3.add(positions[0], position, position);\n    } else {\n      position = positions[j - 1];\n    }\n\n    Cartesian3.clone(position, scratchPrevPosition);\n    Cartesian3.clone(positions[j], scratchPosition);\n\n    if (j === positionsLength - 1) {\n      position = scratchCartesian3;\n      Cartesian3.subtract(\n        positions[positionsLength - 1],\n        positions[positionsLength - 2],\n        position\n      );\n      Cartesian3.add(positions[positionsLength - 1], position, position);\n    } else {\n      position = positions[j + 1];\n    }\n\n    Cartesian3.clone(position, scratchNextPosition);\n\n    let color0, color1;\n    if (defined(finalColors)) {\n      if (j !== 0 && !colorsPerVertex) {\n        color0 = colors[j - 1];\n      } else {\n        color0 = colors[j];\n      }\n\n      if (j !== positionsLength - 1) {\n        color1 = colors[j];\n      }\n    }\n\n    const startK = j === 0 ? 2 : 0;\n    const endK = j === positionsLength - 1 ? 2 : 4;\n\n    for (k = startK; k < endK; ++k) {\n      Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\n      Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\n      Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\n      positionIndex += 3;\n\n      const direction = k - 2 < 0 ? -1.0 : 1.0;\n      expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\n      expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n      if (vertexFormat.st) {\n        st[stIndex++] = j / (positionsLength - 1);\n        st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\n      }\n\n      if (defined(finalColors)) {\n        const color = k < 2 ? color0 : color1;\n\n        finalColors[colorIndex++] = Color.floatToByte(color.red);\n        finalColors[colorIndex++] = Color.floatToByte(color.green);\n        finalColors[colorIndex++] = Color.floatToByte(color.blue);\n        finalColors[colorIndex++] = Color.floatToByte(color.alpha);\n      }\n    }\n  }\n\n  const attributes = new GeometryAttributes();\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: finalPositions,\n  });\n\n  attributes.prevPosition = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: prevPositions,\n  });\n\n  attributes.nextPosition = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: nextPositions,\n  });\n\n  attributes.expandAndWidth = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: 2,\n    values: expandAndWidth,\n  });\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: st,\n    });\n  }\n\n  if (defined(finalColors)) {\n    attributes.color = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 4,\n      values: finalColors,\n      normalize: true,\n    });\n  }\n\n  const indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n  let index = 0;\n  let indicesIndex = 0;\n  const length = positionsLength - 1.0;\n  for (j = 0; j < length; ++j) {\n    indices[indicesIndex++] = index;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 1;\n\n    indices[indicesIndex++] = index + 1;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 3;\n\n    index += 4;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: BoundingSphere.fromPoints(positions),\n    geometryType: GeometryType.POLYLINES,\n  });\n};\nexport default PolylineGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\n\nfunction createPolylineGeometry(polylineGeometry, offset) {\n  if (defined(offset)) {\n    polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\n  }\n  polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\n  return PolylineGeometry.createGeometry(polylineGeometry);\n}\nexport default createPolylineGeometry;\n"],"names":["scratchInterpolateColorsArray","interpolateColors","p0","p1","color0","color1","numPoints","colors","i","length","r0","red","g0","green","b0","blue","a0","alpha","r1","g1","b1","a1","Color","equals","clone","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","PolylineGeometry","options","positions","defaultValue","EMPTY_OBJECT","width","colorsPerVertex","defined","DeveloperError","this","_positions","_colors","_width","_colorsPerVertex","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_arcType","arcType","ArcType","GEODESIC","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","numComponents","Cartesian3","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","scratchCartesian3","scratchPosition","scratchPrevPosition","scratchNextPosition","createGeometry","polylineGeometry","j","k","removedIndices","arrayRemoveDuplicates","equalsEpsilon","removedArrayIndex","nextRemovedIndex","filter","color","index","remove","positionsLength","RHUMB","subdivisionSize","numberOfPointsFunction","chordLength","maximumRadius","PolylinePipeline","numberOfPoints","numberOfPointsRhumbLine","heights","extractHeights","colorLength","newColors","newColorIndex","c0","numColors","interpolatedColors","interpolatedColorsLength","generateCartesianArc","minDistance","height","generateCartesianRhumbArc","size","finalPositions","Float64Array","prevPositions","nextPositions","expandAndWidth","Float32Array","st","finalColors","Uint8Array","position","positionIndex","expandAndWidthIndex","stIndex","colorIndex","subtract","add","endK","direction","Math","max","floatToByte","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","prevPosition","nextPosition","FLOAT","UNSIGNED_BYTE","normalize","indices","IndexDatatype","createTypedArray","indicesIndex","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromPoints","geometryType","GeometryType","POLYLINES","offset"],"mappings":"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"}